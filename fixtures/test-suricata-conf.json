[
  {
    "model": "core.probeconfiguration",
    "pk": 1,
    "fields": {
      "name": "confSuricata1"
    }
  },
  {
    "model": "core.probeconfiguration",
    "pk": 2,
    "fields": {
      "name": "confSuricata2"
    }
  },
  {
    "model": "suricata.confsuricata",
    "pk": 1,
    "fields": {
      "conf_rules_directory": "/etc/suricata/rules",
      "conf_script_directory": "/etc/suricata/lua",
      "conf_iprep_directory": "/etc/suricata/iprep",
      "conf_file": "/etc/suricata/suricata.yaml",
      "conf_advanced": true,
      "conf_advanced_text": "%YAML 1.1\r\n---\r\n\r\n# Suricata configuration file. In addition to the comments describing all\r\n# options in this file, full documentation can be found at:\r\n# https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricatayaml\r\n\r\n##\r\n## Step 1: inform Suricata about your network\r\n##\r\n\r\nvars:\r\n  # more specifc is better for alert accuracy and performance\r\n  address-groups:\r\n    HOME_NET: \"[192.168.0.0/24]\"\r\n    #HOME_NET: \"[192.168.0.0/16]\"\r\n    #HOME_NET: \"[10.0.0.0/8]\"\r\n    #HOME_NET: \"[172.16.0.0/12]\"\r\n    #HOME_NET: \"any\"\r\n\r\n    EXTERNAL_NET: \"!$HOME_NET\"\r\n    #EXTERNAL_NET: \"any\"\r\n\r\n    HTTP_SERVERS: \"$HOME_NET\"\r\n    SMTP_SERVERS: \"$HOME_NET\"\r\n    SQL_SERVERS: \"$HOME_NET\"\r\n    DNS_SERVERS: \"$HOME_NET\"\r\n    TELNET_SERVERS: \"$HOME_NET\"\r\n    AIM_SERVERS: \"$EXTERNAL_NET\"\r\n    DNP3_SERVER: \"$HOME_NET\"\r\n    DNP3_CLIENT: \"$HOME_NET\"\r\n    MODBUS_CLIENT: \"$HOME_NET\"\r\n    MODBUS_SERVER: \"$HOME_NET\"\r\n    ENIP_CLIENT: \"$HOME_NET\"\r\n    ENIP_SERVER: \"$HOME_NET\"\r\n\r\n  port-groups:\r\n    HTTP_PORTS: \"80\"\r\n    SHELLCODE_PORTS: \"!80\"\r\n    ORACLE_PORTS: 1521\r\n    SSH_PORTS: 22\r\n    DNP3_PORTS: 20000\r\n    MODBUS_PORTS: 502\r\n\r\n\r\n##\r\n## Step 2: select the rules to enable or disable\r\n##\r\ndefault-rule-path: /etc/suricata/rules\r\nrule-files:\r\n - deployed.rules\r\n\r\nclassification-file: /etc/suricata/classification.config\r\nreference-config-file: /etc/suricata/reference.config\r\n# threshold-file: /etc/suricata/threshold.config\r\n\r\n\r\n##\r\n## Step 3: select outputs to enable\r\n##\r\n\r\n# The default logging directory.  Any log or output file will be\r\n# placed here if its not specified with a full path name. This can be\r\n# overridden with the -l command line parameter.\r\ndefault-log-dir: /var/log/suricata/\r\n\r\n# global stats configuration\r\nstats:\r\n  enabled: yes\r\n  # The interval field (in seconds) controls at what interval\r\n  # the loggers are invoked.\r\n  interval: 8\r\n\r\n# Configure the type of alert (and other) logging you would like.\r\noutputs:\r\n  # a line based alerts log similar to Snort's fast.log\r\n  - fast:\r\n      enabled: no\r\n      filename: fast.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # Extensible Event Format (nicknamed EVE) event log in JSON format\r\n  - eve-log:\r\n      enabled: yes\r\n      filetype: regular #regular|syslog|unix_dgram|unix_stream|redis\r\n      filename: eve.json\r\n      #prefix: \"@cee: \" # prefix to prepend to each log entry\r\n      # the following are valid when type: syslog above\r\n      #identity: \"suricata\"\r\n      #facility: local5\r\n      #level: Info ## possible levels: Emergency, Alert, Critical,\r\n                   ## Error, Warning, Notice, Info, Debug\r\n      #redis:\r\n      #  server: 127.0.0.1\r\n      #  port: 6379\r\n      #  mode: list ## possible values: list (default), channel\r\n      #  key: suricata ## key or channel to use (default to suricata)\r\n      # Redis pipelining set up. This will enable to only do a query every\r\n      # 'batch-size' events. This should lower the latency induced by network\r\n      # connection at the cost of some memory. There is no flushing implemented\r\n      # so this setting as to be reserved to high traffic suricata.\r\n      #  pipelining:\r\n      #    enabled: yes ## set enable to yes to enable query pipelining\r\n      #    batch-size: 10 ## number of entry to keep in buffer\r\n      types:\r\n        - alert:\r\n            # payload: yes             # enable dumping payload in Base64\r\n            # payload-buffer-size: 4kb # max size of payload buffer to output in eve-log\r\n            # payload-printable: yes   # enable dumping payload in printable (lossy) format\r\n            # packet: yes              # enable dumping of packet (without stream segments)\r\n            http: yes                # enable dumping of http fields\r\n            tls: yes                 # enable dumping of tls fields\r\n            ssh: yes                 # enable dumping of ssh fields\r\n            smtp: yes                # enable dumping of smtp fields\r\n            dnp3: yes                # enable dumping of DNP3 fields\r\n\r\n            # Enable the logging of tagged packets for rules using the\r\n            # \"tag\" keyword.\r\n            tagged-packets: yes\r\n\r\n            # HTTP X-Forwarded-For support by adding an extra field or overwriting\r\n            # the source or destination IP address (depending on flow direction)\r\n            # with the one reported in the X-Forwarded-For HTTP header. This is\r\n            # helpful when reviewing alerts for traffic that is being reverse\r\n            # or forward proxied.\r\n            xff:\r\n              enabled: no\r\n              # Two operation modes are available, \"extra-data\" and \"overwrite\".\r\n              mode: extra-data\r\n              # Two proxy deployments are supported, \"reverse\" and \"forward\". In\r\n              # a \"reverse\" deployment the IP address used is the last one, in a\r\n              # \"forward\" deployment the first IP address is used.\r\n              deployment: reverse\r\n              # Header name where the actual IP address will be reported, if more\r\n              # than one IP address is present, the last IP address will be the\r\n              # one taken into consideration.\r\n              header: X-Forwarded-For\r\n        - http:\r\n            extended: yes     # enable this for extended logging information\r\n            # custom allows additional http fields to be included in eve-log\r\n            # the example below adds three additional fields when uncommented\r\n            #custom: [Accept-Encoding, Accept-Language, Authorization]\r\n        - dns:\r\n            # control logging of queries and answers\r\n            # default yes, no to disable\r\n            query: yes     # enable logging of DNS queries\r\n            answer: yes    # enable logging of DNS answers\r\n            # control which RR types are logged\r\n            # all enabled if custom not specified\r\n            #custom: [a, aaaa, cname, mx, ns, ptr, txt]\r\n        - tls:\r\n            extended: yes     # enable this for extended logging information\r\n        - files:\r\n            force-magic: no   # force logging magic on all logged files\r\n            # force logging of checksums, available hash functions are md5,\r\n            # sha1 and sha256\r\n            #force-hash: [md5]\r\n        #- drop:\r\n        #    alerts: yes      # log alerts that caused drops\r\n        #    flows: all       # start or all: 'start' logs only a single drop\r\n        #                     # per flow direction. All logs each dropped pkt.\r\n        - smtp:\r\n            extended: yes # enable this for extended logging information\r\n            # this includes: bcc, message-id, subject, x_mailer, user-agent\r\n            # custom fields logging from the list:\r\n            #  reply-to, bcc, message-id, subject, x-mailer, user-agent, received,\r\n            #  x-originating-ip, in-reply-to, references, importance, priority,\r\n            #  sensitivity, organization, content-md5, date\r\n            #custom: [received, x-mailer, x-originating-ip, relays, reply-to, bcc]\r\n            # output md5 of fields: body, subject\r\n            # for the body you need to set app-layer.protocols.smtp.mime.body-md5\r\n            # to yes\r\n            #md5: [body, subject]\r\n\r\n        - ssh\r\n        - stats:\r\n            totals: yes       # stats for all threads merged together\r\n            threads: no       # per thread stats\r\n            deltas: no        # include delta values\r\n        # bi-directional flows\r\n        - flow\r\n        # uni-directional flows\r\n        #- netflow\r\n        #- dnp3\r\n\r\n  # alert output for use with Barnyard2\r\n  - unified2-alert:\r\n      enabled: no\r\n      filename: unified2.alert\r\n\r\n      # File size limit.  Can be specified in kb, mb, gb.  Just a number\r\n      # is parsed as bytes.\r\n      #limit: 32mb\r\n\r\n      # Sensor ID field of unified2 alerts.\r\n      #sensor-id: 0\r\n\r\n      # Include payload of packets related to alerts. Defaults to true, set to\r\n      # false if payload is not required.\r\n      #payload: yes\r\n\r\n      # HTTP X-Forwarded-For support by adding the unified2 extra header or\r\n      # overwriting the source or destination IP address (depending on flow\r\n      # direction) with the one reported in the X-Forwarded-For HTTP header.\r\n      # This is helpful when reviewing alerts for traffic that is being reverse\r\n      # or forward proxied.\r\n      xff:\r\n        enabled: no\r\n        # Two operation modes are available, \"extra-data\" and \"overwrite\". Note\r\n        # that in the \"overwrite\" mode, if the reported IP address in the HTTP\r\n        # X-Forwarded-For header is of a different version of the packet\r\n        # received, it will fall-back to \"extra-data\" mode.\r\n        mode: extra-data\r\n        # Two proxy deployments are supported, \"reverse\" and \"forward\". In\r\n        # a \"reverse\" deployment the IP address used is the last one, in a\r\n        # \"forward\" deployment the first IP address is used.\r\n        deployment: reverse\r\n        # Header name where the actual IP address will be reported, if more\r\n        # than one IP address is present, the last IP address will be the\r\n        # one taken into consideration.\r\n        header: X-Forwarded-For\r\n\r\n  # a line based log of HTTP requests (no alerts)\r\n  - http-log:\r\n      enabled: no\r\n      filename: http.log\r\n      append: yes\r\n      #extended: yes     # enable this for extended logging information\r\n      #custom: yes       # enabled the custom logging format (defined by customformat)\r\n      #customformat: \"%{%D-%H:%M:%S}t.%z %{X-Forwarded-For}i %H %m %h %u %s %B %a:%p -> %A:%P\"\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # a line based log of TLS handshake parameters (no alerts)\r\n  - tls-log:\r\n      enabled: no  # Log TLS connections.\r\n      filename: tls.log # File to store TLS logs.\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n      #extended: yes # Log extended information like fingerprint\r\n\r\n  # output module to store certificates chain to disk\r\n  - tls-store:\r\n      enabled: no\r\n      #certs-log-dir: certs # directory to store the certificates files\r\n\r\n  # a line based log of DNS requests and/or replies (no alerts)\r\n  - dns-log:\r\n      enabled: no\r\n      filename: dns.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # Packet log... log packets in pcap format. 3 modes of operation: \"normal\"\r\n  # \"multi\" and \"sguil\".\r\n  #\r\n  # In normal mode a pcap file \"filename\" is created in the default-log-dir,\r\n  # or are as specified by \"dir\".\r\n  # In multi mode, a file is created per thread. This will perform much\r\n  # better, but will create multiple files where 'normal' would create one.\r\n  # In multi mode the filename takes a few special variables:\r\n  # - %n -- thread number\r\n  # - %i -- thread id\r\n  # - %t -- timestamp (secs or secs.usecs based on 'ts-format'\r\n  # E.g. filename: pcap.%n.%t\r\n  #\r\n  # Note that it's possible to use directories, but the directories are not\r\n  # created by Suricata. E.g. filename: pcaps/%n/log.%s will log into the\r\n  # per thread directory.\r\n  #\r\n  # Also note that the limit and max-files settings are enforced per thread.\r\n  # So the size limit when using 8 threads with 1000mb files and 2000 files\r\n  # is: 8*1000*2000 ~ 16TiB.\r\n  #\r\n  # In Sguil mode \"dir\" indicates the base directory. In this base dir the\r\n  # pcaps are created in th directory structure Sguil expects:\r\n  #\r\n  # $sguil-base-dir/YYYY-MM-DD/$filename.<timestamp>\r\n  #\r\n  # By default all packets are logged except:\r\n  # - TCP streams beyond stream.reassembly.depth\r\n  # - encrypted streams after the key exchange\r\n  #\r\n  - pcap-log:\r\n      enabled: no\r\n      filename: log.pcap\r\n\r\n      # File size limit.  Can be specified in kb, mb, gb.  Just a number\r\n      # is parsed as bytes.\r\n      limit: 1000mb\r\n\r\n      # If set to a value will enable ring buffer mode. Will keep Maximum of \"max-files\" of size \"limit\"\r\n      max-files: 2000\r\n\r\n      mode: normal # normal, multi or sguil.\r\n\r\n      # Directory to place pcap files. If not provided the default log\r\n      # directory will be used. Required for \"sguil\" mode.\r\n      #dir: /nsm_data/\r\n\r\n      #ts-format: usec # sec or usec second format (default) is filename.sec usec is filename.sec.usec\r\n      use-stream-depth: no #If set to \"yes\" packets seen after reaching stream inspection depth are ignored. \"no\" logs all packets\r\n      honor-pass-rules: no # If set to \"yes\", flows in which a pass rule matched will stopped being logged.\r\n\r\n  # a full alerts log containing much information for signature writers\r\n  # or for investigating suspected false positives.\r\n  - alert-debug:\r\n      enabled: no\r\n      filename: alert-debug.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # alert output to prelude (http://www.prelude-technologies.com/) only\r\n  # available if Suricata has been compiled with --enable-prelude\r\n  - alert-prelude:\r\n      enabled: no\r\n      profile: suricata\r\n      log-packet-content: no\r\n      log-packet-header: yes\r\n\r\n  # Stats.log contains data from various counters of the suricata engine.\r\n  - stats:\r\n      enabled: yes\r\n      filename: stats.log\r\n      totals: yes       # stats for all threads merged together\r\n      threads: no       # per thread stats\r\n      #null-values: yes  # print counters that have value 0\r\n\r\n  # a line based alerts log similar to fast.log into syslog\r\n  - syslog:\r\n      enabled: no\r\n      # reported identity to syslog. If ommited the program name (usually\r\n      # suricata) will be used.\r\n      #identity: \"suricata\"\r\n      facility: local5\r\n      #level: Info ## possible levels: Emergency, Alert, Critical,\r\n                   ## Error, Warning, Notice, Info, Debug\r\n\r\n  # a line based information for dropped packets in IPS mode\r\n  - drop:\r\n      enabled: no\r\n      filename: drop.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # output module to store extracted files to disk\r\n  #\r\n  # The files are stored to the log-dir in a format \"file.<id>\" where <id> is\r\n  # an incrementing number starting at 1. For each file \"file.<id>\" a meta\r\n  # file \"file.<id>.meta\" is created.\r\n  #\r\n  # File extraction depends on a lot of things to be fully done:\r\n  # - file-store stream-depth. For optimal results, set this to 0 (unlimited)\r\n  # - http request / response body sizes. Again set to 0 for optimal results.\r\n  # - rules that contain the \"filestore\" keyword.\r\n  - file-store:\r\n      enabled: no       # set to yes to enable\r\n      log-dir: files    # directory to store the files\r\n      force-magic: no   # force logging magic on all stored files\r\n      # force logging of checksums, available hash functions are md5,\r\n      # sha1 and sha256\r\n      #force-hash: [md5]\r\n      force-filestore: no # force storing of all files\r\n      # override global stream-depth for sessions in which we want to\r\n      # perform file extraction. Set to 0 for unlimited.\r\n      #stream-depth: 0\r\n      #waldo: file.waldo # waldo file to store the file_id across runs\r\n\r\n  # output module to log files tracked in a easily parsable json format\r\n  - file-log:\r\n      enabled: no\r\n      filename: files-json.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n      force-magic: no   # force logging magic on all logged files\r\n      # force logging of checksums, available hash functions are md5,\r\n      # sha1 and sha256\r\n      #force-hash: [md5]\r\n\r\n  # Log TCP data after stream normalization\r\n  # 2 types: file or dir. File logs into a single logfile. Dir creates\r\n  # 2 files per TCP session and stores the raw TCP data into them.\r\n  # Using 'both' will enable both file and dir modes.\r\n  #\r\n  # Note: limited by stream.depth\r\n  - tcp-data:\r\n      enabled: no\r\n      type: file\r\n      filename: tcp-data.log\r\n\r\n  # Log HTTP body data after normalization, dechunking and unzipping.\r\n  # 2 types: file or dir. File logs into a single logfile. Dir creates\r\n  # 2 files per HTTP session and stores the normalized data into them.\r\n  # Using 'both' will enable both file and dir modes.\r\n  #\r\n  # Note: limited by the body limit settings\r\n  - http-body-data:\r\n      enabled: no\r\n      type: file\r\n      filename: http-data.log\r\n\r\n  # Lua Output Support - execute lua script to generate alert and event\r\n  # output.\r\n  # Documented at:\r\n  # https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Lua_Output\r\n  - lua:\r\n      enabled: yes\r\n      scripts-dir: /etc/suricata/lua/\r\n      # scripts:\r\n      #   - script1.lua\r\n\r\n# Logging configuration.  This is not about logging IDS alerts/events, but\r\n# output about what Suricata is doing, like startup messages, errors, etc.\r\nlogging:\r\n  # The default log level, can be overridden in an output section.\r\n  # Note that debug level logging will only be emitted if Suricata was\r\n  # compiled with the --enable-debug configure option.\r\n  #\r\n  # This value is overriden by the SC_LOG_LEVEL env var.\r\n  default-log-level: notice\r\n\r\n  # The default output format.  Optional parameter, should default to\r\n  # something reasonable if not provided.  Can be overriden in an\r\n  # output section.  You can leave this out to get the default.\r\n  #\r\n  # This value is overriden by the SC_LOG_FORMAT env var.\r\n  #default-log-format: \"[%i] %t - (%f:%l) <%d> (%n) -- \"\r\n\r\n  # A regex to filter output.  Can be overridden in an output section.\r\n  # Defaults to empty (no filter).\r\n  #\r\n  # This value is overriden by the SC_LOG_OP_FILTER env var.\r\n  default-output-filter:\r\n\r\n  # Define your logging outputs.  If none are defined, or they are all\r\n  # disabled you will get the default - console output.\r\n  outputs:\r\n  - console:\r\n      enabled: yes\r\n      # type: json\r\n  - file:\r\n      enabled: yes\r\n      level: info\r\n      filename: /var/log/suricata/suricata.log\r\n      # type: json\r\n  - syslog:\r\n      enabled: no\r\n      facility: local5\r\n      format: \"[%i] <%d> -- \"\r\n      # type: json\r\n\r\n\r\n##\r\n## Step 4: configure common capture settings\r\n##\r\n## See \"Advanced Capture Options\" below for more options, including NETMAP\r\n## and PF_RING.\r\n##\r\n\r\n# Linux high speed capture support\r\naf-packet:\r\n  - interface: eth0\r\n    # Number of receive threads. \"auto\" uses the number of cores\r\n    #threads: auto\r\n    # Default clusterid. AF_PACKET will load balance packets based on flow.\r\n    cluster-id: 99\r\n    # Default AF_PACKET cluster type. AF_PACKET can load balance per flow or per hash.\r\n    # This is only supported for Linux kernel > 3.1\r\n    # possible value are:\r\n    #  * cluster_round_robin: round robin load balancing\r\n    #  * cluster_flow: all packets of a given flow are send to the same socket\r\n    #  * cluster_cpu: all packets treated in kernel by a CPU are send to the same socket\r\n    #  * cluster_qm: all packets linked by network card to a RSS queue are sent to the same\r\n    #  socket. Requires at least Linux 3.14.\r\n    #  * cluster_random: packets are sent randomly to sockets but with an equipartition.\r\n    #  Requires at least Linux 3.14.\r\n    #  * cluster_rollover: kernel rotates between sockets filling each socket before moving\r\n    #  to the next. Requires at least Linux 3.10.\r\n    # Recommended modes are cluster_flow on most boxes and cluster_cpu or cluster_qm on system\r\n    # with capture card using RSS (require cpu affinity tuning and system irq tuning)\r\n    cluster-type: cluster_flow\r\n    # In some fragmentation case, the hash can not be computed. If \"defrag\" is set\r\n    # to yes, the kernel will do the needed defragmentation before sending the packets.\r\n    defrag: yes\r\n    # After Linux kernel 3.10 it is possible to activate the rollover option: if a socket is\r\n    # full then kernel will send the packet on the next socket with room available. This option\r\n    # can minimize packet drop and increase the treated bandwidth on single intensive flow.\r\n    #rollover: yes\r\n    # To use the ring feature of AF_PACKET, set 'use-mmap' to yes\r\n    #use-mmap: yes\r\n    # Lock memory map to avoid it goes to swap. Be careful that over suscribing could lock\r\n    # your system\r\n    #mmap-locked: yes\r\n    # Use experimental tpacket_v3 capture mode, only active if use-mmap is true\r\n    #tpacket-v3: yes\r\n    # Ring size will be computed with respect to max_pending_packets and number\r\n    # of threads. You can set manually the ring size in number of packets by setting\r\n    # the following value. If you are using flow cluster-type and have really network\r\n    # intensive single-flow you could want to set the ring-size independently of the number\r\n    # of threads:\r\n    #ring-size: 2048\r\n    # Block size is used by tpacket_v3 only. It should set to a value high enough to contain\r\n    # a decent number of packets. Size is in bytes so please consider your MTU. It should be\r\n    # a power of 2 and it must be multiple of page size (usually 4096).\r\n    #block-size: 32768\r\n    # tpacket_v3 block timeout: an open block is passed to userspace if it is not\r\n    # filled after block-timeout milliseconds.\r\n    #block-timeout: 10\r\n    # On busy system, this could help to set it to yes to recover from a packet drop\r\n    # phase. This will result in some packets (at max a ring flush) being non treated.\r\n    #use-emergency-flush: yes\r\n    # recv buffer size, increase value could improve performance\r\n    # buffer-size: 32768\r\n    # Set to yes to disable promiscuous mode\r\n    # disable-promisc: no\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - kernel: use indication sent by kernel for each packet (default)\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used.\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: kernel\r\n    # BPF filter to apply to this interface. The pcap filter syntax apply here.\r\n    #bpf-filter: port 80 or udp\r\n    # You can use the following variables to activate AF_PACKET tap or IPS mode.\r\n    # If copy-mode is set to ips or tap, the traffic coming to the current\r\n    # interface will be copied to the copy-iface interface. If 'tap' is set, the\r\n    # copy is complete. If 'ips' is set, the packet matching a 'drop' action\r\n    # will not be copied.\r\n    #copy-mode: ips\r\n    #copy-iface: eth1\r\n\r\n  # Put default values here. These will be used for an interface that is not\r\n  # in the list above.\r\n  - interface: default\r\n    #threads: auto\r\n    #use-mmap: no\r\n    #rollover: yes\r\n    #tpacket-v3: yes\r\n\r\n# Cross platform libpcap capture support\r\npcap:\r\n  - interface: eth0\r\n    # On Linux, pcap will try to use mmaped capture and will use buffer-size\r\n    # as total of memory used by the ring. So set this to something bigger\r\n    # than 1% of your bandwidth.\r\n    #buffer-size: 16777216\r\n    #bpf-filter: \"tcp and port 25\"\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used. (default)\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: auto\r\n    # With some accelerator cards using a modified libpcap (like myricom), you\r\n    # may want to have the same number of capture threads as the number of capture\r\n    # rings. In this case, set up the threads variable to N to start N threads\r\n    # listening on the same interface.\r\n    #threads: 16\r\n    # set to no to disable promiscuous mode:\r\n    #promisc: no\r\n    # set snaplen, if not set it defaults to MTU if MTU can be known\r\n    # via ioctl call and to full capture if not.\r\n    #snaplen: 1518\r\n  # Put default values here\r\n  - interface: default\r\n    #checksum-checks: auto\r\n\r\n# Settings for reading pcap files\r\npcap-file:\r\n  # Possible values are:\r\n  #  - yes: checksum validation is forced\r\n  #  - no: checksum validation is disabled\r\n  #  - auto: suricata uses a statistical approach to detect when\r\n  #  checksum off-loading is used. (default)\r\n  # Warning: 'checksum-validation' must be set to yes to have checksum tested\r\n  checksum-checks: auto\r\n\r\n# See \"Advanced Capture Options\" below for more options, including NETMAP\r\n# and PF_RING.\r\n\r\n\r\n##\r\n## Step 5: App Layer Protocol Configuration\r\n##\r\n\r\n# Configure the app-layer parsers. The protocols section details each\r\n# protocol.\r\n#\r\n# The option \"enabled\" takes 3 values - \"yes\", \"no\", \"detection-only\".\r\n# \"yes\" enables both detection and the parser, \"no\" disables both, and\r\n# \"detection-only\" enables protocol detection only (parser disabled).\r\napp-layer:\r\n  protocols:\r\n    tls:\r\n      enabled: yes\r\n      detection-ports:\r\n        dp: 443\r\n\r\n      # Completely stop processing TLS/SSL session after the handshake\r\n      # completed. If bypass is enabled this will also trigger flow\r\n      # bypass. If disabled (the default), TLS/SSL session is still\r\n      # tracked for Heartbleed and other anomalies.\r\n      #no-reassemble: yes\r\n    dcerpc:\r\n      enabled: yes\r\n    ftp:\r\n      enabled: yes\r\n    ssh:\r\n      enabled: yes\r\n    smtp:\r\n      enabled: yes\r\n      # Configure SMTP-MIME Decoder\r\n      mime:\r\n        # Decode MIME messages from SMTP transactions\r\n        # (may be resource intensive)\r\n        # This field supercedes all others because it turns the entire\r\n        # process on or off\r\n        decode-mime: yes\r\n\r\n        # Decode MIME entity bodies (ie. base64, quoted-printable, etc.)\r\n        decode-base64: yes\r\n        decode-quoted-printable: yes\r\n\r\n        # Maximum bytes per header data value stored in the data structure\r\n        # (default is 2000)\r\n        header-value-depth: 2000\r\n\r\n        # Extract URLs and save in state data structure\r\n        extract-urls: yes\r\n        # Set to yes to compute the md5 of the mail body. You will then\r\n        # be able to journalize it.\r\n        body-md5: no\r\n      # Configure inspected-tracker for file_data keyword\r\n      inspected-tracker:\r\n        content-limit: 100000\r\n        content-inspect-min-size: 32768\r\n        content-inspect-window: 4096\r\n    imap:\r\n      enabled: detection-only\r\n    msn:\r\n      enabled: detection-only\r\n    smb:\r\n      enabled: yes\r\n      detection-ports:\r\n        dp: 139, 445\r\n    # smb2 detection is disabled internally inside the engine.\r\n    #smb2:\r\n    #  enabled: yes\r\n    dns:\r\n      # memcaps. Globally and per flow/state.\r\n      #global-memcap: 16mb\r\n      #state-memcap: 512kb\r\n\r\n      # How many unreplied DNS requests are considered a flood.\r\n      # If the limit is reached, app-layer-event:dns.flooded; will match.\r\n      #request-flood: 500\r\n\r\n      tcp:\r\n        enabled: yes\r\n        detection-ports:\r\n          dp: 53\r\n      udp:\r\n        enabled: yes\r\n        detection-ports:\r\n          dp: 53\r\n    http:\r\n      enabled: yes\r\n      # memcap: 64mb\r\n\r\n      # default-config:           Used when no server-config matches\r\n      #   personality:            List of personalities used by default\r\n      #   request-body-limit:     Limit reassembly of request body for inspection\r\n      #                           by http_client_body & pcre /P option.\r\n      #   response-body-limit:    Limit reassembly of response body for inspection\r\n      #                           by file_data, http_server_body & pcre /Q option.\r\n      #   double-decode-path:     Double decode path section of the URI\r\n      #   double-decode-query:    Double decode query section of the URI\r\n      #   response-body-decompress-layer-limit:\r\n      #                           Limit to how many layers of compression will be\r\n      #                           decompressed. Defaults to 2.\r\n      #\r\n      # server-config:            List of server configurations to use if address matches\r\n      #   address:                List of ip addresses or networks for this block\r\n      #   personalitiy:           List of personalities used by this block\r\n      #   request-body-limit:     Limit reassembly of request body for inspection\r\n      #                           by http_client_body & pcre /P option.\r\n      #   response-body-limit:    Limit reassembly of response body for inspection\r\n      #                           by file_data, http_server_body & pcre /Q option.\r\n      #   double-decode-path:     Double decode path section of the URI\r\n      #   double-decode-query:    Double decode query section of the URI\r\n      #\r\n      #   uri-include-all:        Include all parts of the URI. By default the\r\n      #                           'scheme', username/password, hostname and port\r\n      #                           are excluded. Setting this option to true adds\r\n      #                           all of them to the normalized uri as inspected\r\n      #                           by http_uri, urilen, pcre with /U and the other\r\n      #                           keywords that inspect the normalized uri.\r\n      #                           Note that this does not affect http_raw_uri.\r\n      #                           Also, note that including all was the default in\r\n      #                           1.4 and 2.0beta1.\r\n      #\r\n      #   meta-field-limit:       Hard size limit for request and response size\r\n      #                           limits. Applies to request line and headers,\r\n      #                           response line and headers. Does not apply to\r\n      #                           request or response bodies. Default is 18k.\r\n      #                           If this limit is reached an event is raised.\r\n      #\r\n      # Currently Available Personalities:\r\n      #   Minimal, Generic, IDS (default), IIS_4_0, IIS_5_0, IIS_5_1, IIS_6_0,\r\n      #   IIS_7_0, IIS_7_5, Apache_2\r\n      libhtp:\r\n         default-config:\r\n           personality: IDS\r\n\r\n           # Can be specified in kb, mb, gb.  Just a number indicates\r\n           # it's in bytes.\r\n           request-body-limit: 100kb\r\n           response-body-limit: 100kb\r\n\r\n           # inspection limits\r\n           request-body-minimal-inspect-size: 32kb\r\n           request-body-inspect-window: 4kb\r\n           response-body-minimal-inspect-size: 40kb\r\n           response-body-inspect-window: 16kb\r\n\r\n           # response body decompression (0 disables)\r\n           response-body-decompress-layer-limit: 2\r\n\r\n           # auto will use http-body-inline mode in IPS mode, yes or no set it statically\r\n           http-body-inline: auto\r\n\r\n           # Take a random value for inspection sizes around the specified value.\r\n           # This lower the risk of some evasion technics but could lead\r\n           # detection change between runs. It is set to 'yes' by default.\r\n           #randomize-inspection-sizes: yes\r\n           # If randomize-inspection-sizes is active, the value of various\r\n           # inspection size will be choosen in the [1 - range%, 1 + range%]\r\n           # range\r\n           # Default value of randomize-inspection-range is 10.\r\n           #randomize-inspection-range: 10\r\n\r\n           # decoding\r\n           double-decode-path: no\r\n           double-decode-query: no\r\n\r\n         server-config:\r\n\r\n           #- apache:\r\n           #    address: [192.168.1.0/24, 127.0.0.0/8, \"::1\"]\r\n           #    personality: Apache_2\r\n           #    # Can be specified in kb, mb, gb.  Just a number indicates\r\n           #    # it's in bytes.\r\n           #    request-body-limit: 4096\r\n           #    response-body-limit: 4096\r\n           #    double-decode-path: no\r\n           #    double-decode-query: no\r\n\r\n           #- iis7:\r\n           #    address:\r\n           #      - 192.168.0.0/24\r\n           #      - 192.168.10.0/24\r\n           #    personality: IIS_7_0\r\n           #    # Can be specified in kb, mb, gb.  Just a number indicates\r\n           #    # it's in bytes.\r\n           #    request-body-limit: 4096\r\n           #    response-body-limit: 4096\r\n           #    double-decode-path: no\r\n           #    double-decode-query: no\r\n\r\n    # Note: Modbus probe parser is minimalist due to the poor significant field\r\n    # Only Modbus message length (greater than Modbus header length)\r\n    # And Protocol ID (equal to 0) are checked in probing parser\r\n    # It is important to enable detection port and define Modbus port\r\n    # to avoid false positive\r\n    modbus:\r\n      # How many unreplied Modbus requests are considered a flood.\r\n      # If the limit is reached, app-layer-event:modbus.flooded; will match.\r\n      #request-flood: 500\r\n\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 502\r\n      # According to MODBUS Messaging on TCP/IP Implementation Guide V1.0b, it\r\n      # is recommended to keep the TCP connection opened with a remote device\r\n      # and not to open and close it for each MODBUS/TCP transaction. In that\r\n      # case, it is important to set the depth of the stream reassembling as\r\n      # unlimited (stream.reassembly.depth: 0)\r\n\r\n      # Stream reassembly size for modbus. By default track it completely.\r\n      stream-depth: 0\r\n\r\n    # DNP3\r\n    dnp3:\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 20000\r\n\r\n    # SCADA EtherNet/IP and CIP protocol support\r\n    enip:\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 44818\r\n        sp: 44818\r\n\r\n# Limit for the maximum number of asn1 frames to decode (default 256)\r\nasn1-max-frames: 256\r\n\r\n\r\n##############################################################################\r\n##\r\n## Advanced settings below\r\n##\r\n##############################################################################\r\n\r\n##\r\n## Run Options\r\n##\r\n\r\n# Run suricata as user and group.\r\n#run-as:\r\n#  user: suri\r\n#  group: suri\r\n\r\n# Some logging module will use that name in event as identifier. The default\r\n# value is the hostname\r\n#sensor-name: suricata\r\n\r\n# Default pid file.\r\n# Will use this file if no --pidfile in command options.\r\n#pid-file: /var/run/suricata.pid\r\n\r\n# Daemon working directory\r\n# Suricata will change directory to this one if provided\r\n# Default: \"/\"\r\n#daemon-directory: \"/\"\r\n\r\n# Suricata core dump configuration. Limits the size of the core dump file to\r\n# approximately max-dump. The actual core dump size will be a multiple of the\r\n# page size. Core dumps that would be larger than max-dump are truncated. On\r\n# Linux, the actual core dump size may be a few pages larger than max-dump.\r\n# Setting max-dump to 0 disables core dumping.\r\n# Setting max-dump to 'unlimited' will give the full core dump file.\r\n# On 32-bit Linux, a max-dump value >= ULONG_MAX may cause the core dump size\r\n# to be 'unlimited'.\r\n\r\ncoredump:\r\n  max-dump: unlimited\r\n\r\n# If suricata box is a router for the sniffed networks, set it to 'router'. If\r\n# it is a pure sniffing setup, set it to 'sniffer-only'.\r\n# If set to auto, the variable is internally switch to 'router' in IPS mode\r\n# and 'sniffer-only' in IDS mode.\r\n# This feature is currently only used by the reject* keywords.\r\nhost-mode: auto\r\n\r\n# Number of packets preallocated per thread. The default is 1024. A higher number\r\n# will make sure each CPU will be more easily kept busy, but may negatively\r\n# impact caching.\r\n#\r\n# If you are using the CUDA pattern matcher (mpm-algo: ac-cuda), different rules\r\n# apply. In that case try something like 60000 or more. This is because the CUDA\r\n# pattern matcher buffers and scans as many packets as possible in parallel.\r\n#max-pending-packets: 1024\r\n\r\n# Runmode the engine should use. Please check --list-runmodes to get the available\r\n# runmodes for each packet acquisition method. Defaults to \"autofp\" (auto flow pinned\r\n# load balancing).\r\n#runmode: autofp\r\n\r\n# Specifies the kind of flow load balancer used by the flow pinned autofp mode.\r\n#\r\n# Supported schedulers are:\r\n#\r\n# round-robin       - Flows assigned to threads in a round robin fashion.\r\n# active-packets    - Flows assigned to threads that have the lowest number of\r\n#                     unprocessed packets (default).\r\n# hash              - Flow alloted usihng the address hash. More of a random\r\n#                     technique. Was the default in Suricata 1.2.1 and older.\r\n#\r\n#autofp-scheduler: active-packets\r\n\r\n# Preallocated size for packet. Default is 1514 which is the classical\r\n# size for pcap on ethernet. You should adjust this value to the highest\r\n# packet size (MTU + hardware header) on your system.\r\n#default-packet-size: 1514\r\n\r\n# Unix command socket can be used to pass commands to suricata.\r\n# An external tool can then connect to get information from suricata\r\n# or trigger some modifications of the engine. Set enabled to yes\r\n# to activate the feature. In auto mode, the feature will only be\r\n# activated in live capture mode. You can use the filename variable to set\r\n# the file name of the socket.\r\nunix-command:\r\n  enabled: yes\r\n  filename: /var/run/suricata-command.socket\r\n\r\n# Magic file. The extension .mgc is added to the value here.\r\n#magic-file: /usr/share/file/magic\r\n#magic-file:\r\n\r\nlegacy:\r\n  uricontent: enabled\r\n\r\n##\r\n## Detection settings\r\n##\r\n\r\n# Set the order of alerts bassed on actions\r\n# The default order is pass, drop, reject, alert\r\n# action-order:\r\n#   - pass\r\n#   - drop\r\n#   - reject\r\n#   - alert\r\n\r\n# IP Reputation\r\n#reputation-categories-file: /etc/suricata/iprep/categories.txt\r\n#default-reputation-path: /etc/suricata/iprep\r\n#reputation-files:\r\n# - reputation.list\r\n\r\n# When run with the option --engine-analysis, the engine will read each of\r\n# the parameters below, and print reports for each of the enabled sections\r\n# and exit.  The reports are printed to a file in the default log dir\r\n# given by the parameter \"default-log-dir\", with engine reporting\r\n# subsection below printing reports in its own report file.\r\nengine-analysis:\r\n  # enables printing reports for fast-pattern for every rule.\r\n  rules-fast-pattern: yes\r\n  # enables printing reports for each rule\r\n  rules: yes\r\n\r\n#recursion and match limits for PCRE where supported\r\npcre:\r\n  match-limit: 3500\r\n  match-limit-recursion: 1500\r\n\r\n##\r\n## Advanced Traffic Tracking and Reconstruction Settings\r\n##\r\n\r\n# Host specific policies for defragmentation and TCP stream\r\n# reassembly. The host OS lookup is done using a radix tree, just\r\n# like a routing table so the most specific entry matches.\r\nhost-os-policy:\r\n  # Make the default policy windows.\r\n  windows: [0.0.0.0/0]\r\n  bsd: []\r\n  bsd-right: []\r\n  old-linux: []\r\n  linux: []\r\n  old-solaris: []\r\n  solaris: []\r\n  hpux10: []\r\n  hpux11: []\r\n  irix: []\r\n  macos: []\r\n  vista: []\r\n  windows2k3: []\r\n\r\n# Defrag settings:\r\n\r\ndefrag:\r\n  memcap: 32mb\r\n  hash-size: 65536\r\n  trackers: 65535 # number of defragmented flows to follow\r\n  max-frags: 65535 # number of fragments to keep (higher than trackers)\r\n  prealloc: yes\r\n  timeout: 60\r\n\r\n# Enable defrag per host settings\r\n#  host-config:\r\n#\r\n#    - dmz:\r\n#        timeout: 30\r\n#        address: [192.168.1.0/24, 127.0.0.0/8, 1.1.1.0/24, 2.2.2.0/24, \"1.1.1.1\", \"2.2.2.2\", \"::1\"]\r\n#\r\n#    - lan:\r\n#        timeout: 45\r\n#        address:\r\n#          - 192.168.0.0/24\r\n#          - 192.168.10.0/24\r\n#          - 172.16.14.0/24\r\n\r\n# Flow settings:\r\n# By default, the reserved memory (memcap) for flows is 32MB. This is the limit\r\n# for flow allocation inside the engine. You can change this value to allow\r\n# more memory usage for flows.\r\n# The hash-size determine the size of the hash used to identify flows inside\r\n# the engine, and by default the value is 65536.\r\n# At the startup, the engine can preallocate a number of flows, to get a better\r\n# performance. The number of flows preallocated is 10000 by default.\r\n# emergency-recovery is the percentage of flows that the engine need to\r\n# prune before unsetting the emergency state. The emergency state is activated\r\n# when the memcap limit is reached, allowing to create new flows, but\r\n# prunning them with the emergency timeouts (they are defined below).\r\n# If the memcap is reached, the engine will try to prune flows\r\n# with the default timeouts. If it doens't find a flow to prune, it will set\r\n# the emergency bit and it will try again with more agressive timeouts.\r\n# If that doesn't work, then it will try to kill the last time seen flows\r\n# not in use.\r\n# The memcap can be specified in kb, mb, gb.  Just a number indicates it's\r\n# in bytes.\r\n\r\nflow:\r\n  memcap: 128mb\r\n  hash-size: 65536\r\n  prealloc: 10000\r\n  emergency-recovery: 30\r\n  #managers: 1 # default to one flow manager\r\n  #recyclers: 1 # default to one flow recycler thread\r\n\r\n# This option controls the use of vlan ids in the flow (and defrag)\r\n# hashing. Normally this should be enabled, but in some (broken)\r\n# setups where both sides of a flow are not tagged with the same vlan\r\n# tag, we can ignore the vlan id's in the flow hashing.\r\nvlan:\r\n  use-for-tracking: true\r\n\r\n# Specific timeouts for flows. Here you can specify the timeouts that the\r\n# active flows will wait to transit from the current state to another, on each\r\n# protocol. The value of \"new\" determine the seconds to wait after a hanshake or\r\n# stream startup before the engine free the data of that flow it doesn't\r\n# change the state to established (usually if we don't receive more packets\r\n# of that flow). The value of \"established\" is the amount of\r\n# seconds that the engine will wait to free the flow if it spend that amount\r\n# without receiving new packets or closing the connection. \"closed\" is the\r\n# amount of time to wait after a flow is closed (usually zero). \"bypassed\"\r\n# timeout controls locally bypassed flows. For these flows we don't do any other\r\n# tracking. If no packets have been seen after this timeout, the flow is discarded.\r\n#\r\n# There's an emergency mode that will become active under attack circumstances,\r\n# making the engine to check flow status faster. This configuration variables\r\n# use the prefix \"emergency-\" and work similar as the normal ones.\r\n# Some timeouts doesn't apply to all the protocols, like \"closed\", for udp and\r\n# icmp.\r\n\r\nflow-timeouts:\r\n\r\n  default:\r\n    new: 30\r\n    established: 300\r\n    closed: 0\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-closed: 0\r\n    emergency-bypassed: 50\r\n  tcp:\r\n    new: 60\r\n    established: 600\r\n    closed: 60\r\n    bypassed: 100\r\n    emergency-new: 5\r\n    emergency-established: 100\r\n    emergency-closed: 10\r\n    emergency-bypassed: 50\r\n  udp:\r\n    new: 30\r\n    established: 300\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-bypassed: 50\r\n  icmp:\r\n    new: 30\r\n    established: 300\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-bypassed: 50\r\n\r\n# Stream engine settings. Here the TCP stream tracking and reassembly\r\n# engine is configured.\r\n#\r\n# stream:\r\n#   memcap: 32mb                # Can be specified in kb, mb, gb.  Just a\r\n#                               # number indicates it's in bytes.\r\n#   checksum-validation: yes    # To validate the checksum of received\r\n#                               # packet. If csum validation is specified as\r\n#                               # \"yes\", then packet with invalid csum will not\r\n#                               # be processed by the engine stream/app layer.\r\n#                               # Warning: locally generated trafic can be\r\n#                               # generated without checksum due to hardware offload\r\n#                               # of checksum. You can control the handling of checksum\r\n#                               # on a per-interface basis via the 'checksum-checks'\r\n#                               # option\r\n#   prealloc-sessions: 2k       # 2k sessions prealloc'd per stream thread\r\n#   midstream: false            # don't allow midstream session pickups\r\n#   async-oneside: false        # don't enable async stream handling\r\n#   inline: no                  # stream inline mode\r\n#   max-synack-queued: 5        # Max different SYN/ACKs to queue\r\n#   bypass: no                  # Bypass packets when stream.depth is reached\r\n#\r\n#   reassembly:\r\n#     memcap: 64mb              # Can be specified in kb, mb, gb.  Just a number\r\n#                               # indicates it's in bytes.\r\n#     depth: 1mb                # Can be specified in kb, mb, gb.  Just a number\r\n#                               # indicates it's in bytes.\r\n#     toserver-chunk-size: 2560 # inspect raw stream in chunks of at least\r\n#                               # this size.  Can be specified in kb, mb,\r\n#                               # gb.  Just a number indicates it's in bytes.\r\n#                               # The max acceptable size is 4024 bytes.\r\n#     toclient-chunk-size: 2560 # inspect raw stream in chunks of at least\r\n#                               # this size.  Can be specified in kb, mb,\r\n#                               # gb.  Just a number indicates it's in bytes.\r\n#                               # The max acceptable size is 4024 bytes.\r\n#     randomize-chunk-size: yes # Take a random value for chunk size around the specified value.\r\n#                               # This lower the risk of some evasion technics but could lead\r\n#                               # detection change between runs. It is set to 'yes' by default.\r\n#     randomize-chunk-range: 10 # If randomize-chunk-size is active, the value of chunk-size is\r\n#                               # a random value between (1 - randomize-chunk-range/100)*toserver-chunk-size\r\n#                               # and (1 + randomize-chunk-range/100)*toserver-chunk-size and the same\r\n#                               # calculation for toclient-chunk-size.\r\n#                               # Default value of randomize-chunk-range is 10.\r\n#\r\n#     raw: yes                  # 'Raw' reassembly enabled or disabled.\r\n#                               # raw is for content inspection by detection\r\n#                               # engine.\r\n#\r\n#     chunk-prealloc: 250       # Number of preallocated stream chunks. These\r\n#                               # are used during stream inspection (raw).\r\n#     segments:                 # Settings for reassembly segment pool.\r\n#       - size: 4               # Size of the (data)segment for a pool\r\n#         prealloc: 256         # Number of segments to prealloc and keep\r\n#                               # in the pool.\r\n#     zero-copy-size: 128       # This option sets in bytes the value at\r\n#                               # which segment data is passed to the app\r\n#                               # layer API directly. Data sizes equal to\r\n#                               # and higher than the value set are passed\r\n#                               # on directly.\r\n#\r\nstream:\r\n  memcap: 64mb\r\n  checksum-validation: yes      # reject wrong csums\r\n  inline: auto                  # auto will use inline mode in IPS mode, yes or no set it statically\r\n  reassembly:\r\n    memcap: 256mb\r\n    depth: 1mb                  # reassemble 1mb into a stream\r\n    toserver-chunk-size: 2560\r\n    toclient-chunk-size: 2560\r\n    randomize-chunk-size: yes\r\n    #randomize-chunk-range: 10\r\n    #raw: yes\r\n    #chunk-prealloc: 250\r\n    #segments:\r\n    #  - size: 4\r\n    #    prealloc: 256\r\n    #  - size: 16\r\n    #    prealloc: 512\r\n    #  - size: 112\r\n    #    prealloc: 512\r\n    #  - size: 248\r\n    #    prealloc: 512\r\n    #  - size: 512\r\n    #    prealloc: 512\r\n    #  - size: 768\r\n    #    prealloc: 1024\r\n    # 'from_mtu' means that the size is mtu - 40,\r\n    # or 1460 if mtu couldn't be determined.\r\n    #  - size: from_mtu\r\n    #    prealloc: 1024\r\n    #  - size: 65535\r\n    #    prealloc: 128\r\n    #zero-copy-size: 128\r\n\r\n# Host table:\r\n#\r\n# Host table is used by tagging and per host thresholding subsystems.\r\n#\r\nhost:\r\n  hash-size: 4096\r\n  prealloc: 1000\r\n  memcap: 32mb\r\n\r\n# IP Pair table:\r\n#\r\n# Used by xbits 'ippair' tracking.\r\n#\r\n#ippair:\r\n#  hash-size: 4096\r\n#  prealloc: 1000\r\n#  memcap: 32mb\r\n\r\n\r\n##\r\n## Performance tuning and profiling\r\n##\r\n\r\n# The detection engine builds internal groups of signatures. The engine\r\n# allow us to specify the profile to use for them, to manage memory on an\r\n# efficient way keeping a good performance. For the profile keyword you\r\n# can use the words \"low\", \"medium\", \"high\" or \"custom\". If you use custom\r\n# make sure to define the values at \"- custom-values\" as your convenience.\r\n# Usually you would prefer medium/high/low.\r\n#\r\n# \"sgh mpm-context\", indicates how the staging should allot mpm contexts for\r\n# the signature groups.  \"single\" indicates the use of a single context for\r\n# all the signature group heads.  \"full\" indicates a mpm-context for each\r\n# group head.  \"auto\" lets the engine decide the distribution of contexts\r\n# based on the information the engine gathers on the patterns from each\r\n# group head.\r\n#\r\n# The option inspection-recursion-limit is used to limit the recursive calls\r\n# in the content inspection code.  For certain payload-sig combinations, we\r\n# might end up taking too much time in the content inspection code.\r\n# If the argument specified is 0, the engine uses an internally defined\r\n# default limit.  On not specifying a value, we use no limits on the recursion.\r\ndetect:\r\n  profile: medium\r\n  custom-values:\r\n    toclient-groups: 3\r\n    toserver-groups: 25\r\n  sgh-mpm-context: auto\r\n  inspection-recursion-limit: 3000\r\n  # If set to yes, the loading of signatures will be made after the capture\r\n  # is started. This will limit the downtime in IPS mode.\r\n  #delayed-detect: yes\r\n\r\n  prefilter:\r\n    # default prefiltering setting. \"mpm\" only creates MPM/fast_pattern\r\n    # engines. \"auto\" also sets up prefilter engines for other keywords.\r\n    # Use --list-keywords=all to see which keywords support prefiltering.\r\n    default: mpm\r\n\r\n  # the grouping values above control how many groups are created per\r\n  # direction. Port whitelisting forces that port to get it's own group.\r\n  # Very common ports will benefit, as well as ports with many expensive\r\n  # rules.\r\n  grouping:\r\n    #tcp-whitelist: 53, 80, 139, 443, 445, 1433, 3306, 3389, 6666, 6667, 8080\r\n    #udp-whitelist: 53, 135, 5060\r\n\r\n  profiling:\r\n    # Log the rules that made it past the prefilter stage, per packet\r\n    # default is off. The threshold setting determines how many rules\r\n    # must have made it past pre-filter for that rule to trigger the\r\n    # logging.\r\n    #inspect-logging-threshold: 200\r\n    grouping:\r\n      dump-to-disk: false\r\n      include-rules: false      # very verbose\r\n      include-mpm-stats: false\r\n\r\n# Select the multi pattern algorithm you want to run for scan/search the\r\n# in the engine.\r\n#\r\n# The supported algorithms are:\r\n# \"ac\"      - Aho-Corasick, default implementation\r\n# \"ac-bs\"   - Aho-Corasick, reduced memory implementation\r\n# \"ac-cuda\" - Aho-Corasick, CUDA implementation\r\n# \"ac-ks\"   - Aho-Corasick, \"Ken Steele\" variant\r\n# \"hs\"      - Hyperscan, available when built with Hyperscan support\r\n#\r\n# The default mpm-algo value of \"auto\" will use \"hs\" if Hyperscan is\r\n# available, \"ac\" otherwise.\r\n#\r\n# The mpm you choose also decides the distribution of mpm contexts for\r\n# signature groups, specified by the conf - \"detect.sgh-mpm-context\".\r\n# Selecting \"ac\" as the mpm would require \"detect.sgh-mpm-context\"\r\n# to be set to \"single\", because of ac's memory requirements, unless the\r\n# ruleset is small enough to fit in one's memory, in which case one can\r\n# use \"full\" with \"ac\".  Rest of the mpms can be run in \"full\" mode.\r\n#\r\n# There is also a CUDA pattern matcher (only available if Suricata was\r\n# compiled with --enable-cuda: b2g_cuda. Make sure to update your\r\n# max-pending-packets setting above as well if you use b2g_cuda.\r\n\r\nmpm-algo: auto\r\n\r\n# Select the matching algorithm you want to use for single-pattern searches.\r\n#\r\n# Supported algorithms are \"bm\" (Boyer-Moore) and \"hs\" (Hyperscan, only\r\n# available if Suricata has been built with Hyperscan support).\r\n#\r\n# The default of \"auto\" will use \"hs\" if available, otherwise \"bm\".\r\n\r\nspm-algo: auto\r\n\r\n# Suricata is multi-threaded. Here the threading can be influenced.\r\nthreading:\r\n  set-cpu-affinity: no\r\n  # Tune cpu affinity of threads. Each family of threads can be bound\r\n  # on specific CPUs.\r\n  #\r\n  # These 2 apply to the all runmodes:\r\n  # management-cpu-set is used for flow timeout handling, counters\r\n  # worker-cpu-set is used for 'worker' threads\r\n  #\r\n  # Additionally, for autofp these apply:\r\n  # receive-cpu-set is used for capture threads\r\n  # verdict-cpu-set is used for IPS verdict threads\r\n  #\r\n  cpu-affinity:\r\n    - management-cpu-set:\r\n        cpu: [ 0 ]  # include only these cpus in affinity settings\r\n    - receive-cpu-set:\r\n        cpu: [ 0 ]  # include only these cpus in affinity settings\r\n    - worker-cpu-set:\r\n        cpu: [ \"all\" ]\r\n        mode: \"exclusive\"\r\n        # Use explicitely 3 threads and don't compute number by using\r\n        # detect-thread-ratio variable:\r\n        # threads: 3\r\n        prio:\r\n          low: [ 0 ]\r\n          medium: [ \"1-2\" ]\r\n          high: [ 3 ]\r\n          default: \"medium\"\r\n    #- verdict-cpu-set:\r\n    #    cpu: [ 0 ]\r\n    #    prio:\r\n    #      default: \"high\"\r\n  #\r\n  # By default Suricata creates one \"detect\" thread per available CPU/CPU core.\r\n  # This setting allows controlling this behaviour. A ratio setting of 2 will\r\n  # create 2 detect threads for each CPU/CPU core. So for a dual core CPU this\r\n  # will result in 4 detect threads. If values below 1 are used, less threads\r\n  # are created. So on a dual core CPU a setting of 0.5 results in 1 detect\r\n  # thread being created. Regardless of the setting at a minimum 1 detect\r\n  # thread will always be created.\r\n  #\r\n  detect-thread-ratio: 1.0\r\n\r\n# Luajit has a strange memory requirement, it's 'states' need to be in the\r\n# first 2G of the process' memory.\r\n#\r\n# 'luajit.states' is used to control how many states are preallocated.\r\n# State use: per detect script: 1 per detect thread. Per output script: 1 per\r\n# script.\r\nluajit:\r\n  states: 128\r\n\r\n# Profiling settings. Only effective if Suricata has been built with the\r\n# the --enable-profiling configure flag.\r\n#\r\nprofiling:\r\n  # Run profiling for every xth packet. The default is 1, which means we\r\n  # profile every packet. If set to 1000, one packet is profiled for every\r\n  # 1000 received.\r\n  #sample-rate: 1000\r\n\r\n  # rule profiling\r\n  rules:\r\n\r\n    # Profiling can be disabled here, but it will still have a\r\n    # performance impact if compiled in.\r\n    enabled: yes\r\n    filename: rule_perf.log\r\n    append: yes\r\n\r\n    # Sort options: ticks, avgticks, checks, matches, maxticks\r\n    sort: avgticks\r\n\r\n    # Limit the number of items printed at exit (ignored for json).\r\n    limit: 100\r\n\r\n    # output to json\r\n    json: yes\r\n\r\n  # per keyword profiling\r\n  keywords:\r\n    enabled: yes\r\n    filename: keyword_perf.log\r\n    append: yes\r\n\r\n  # per rulegroup profiling\r\n  rulegroups:\r\n    enabled: yes\r\n    filename: rule_group_perf.log\r\n    append: yes\r\n\r\n  # packet profiling\r\n  packets:\r\n\r\n    # Profiling can be disabled here, but it will still have a\r\n    # performance impact if compiled in.\r\n    enabled: yes\r\n    filename: packet_stats.log\r\n    append: yes\r\n\r\n    # per packet csv output\r\n    csv:\r\n\r\n      # Output can be disabled here, but it will still have a\r\n      # performance impact if compiled in.\r\n      enabled: no\r\n      filename: packet_stats.csv\r\n\r\n  # profiling of locking. Only available when Suricata was built with\r\n  # --enable-profiling-locks.\r\n  locks:\r\n    enabled: no\r\n    filename: lock_stats.log\r\n    append: yes\r\n\r\n  pcap-log:\r\n    enabled: no\r\n    filename: pcaplog_stats.log\r\n    append: yes\r\n\r\n##\r\n## Netfilter integration\r\n##\r\n\r\n# When running in NFQ inline mode, it is possible to use a simulated\r\n# non-terminal NFQUEUE verdict.\r\n# This permit to do send all needed packet to suricata via this a rule:\r\n#        iptables -I FORWARD -m mark ! --mark $MARK/$MASK -j NFQUEUE\r\n# And below, you can have your standard filtering ruleset. To activate\r\n# this mode, you need to set mode to 'repeat'\r\n# If you want packet to be sent to another queue after an ACCEPT decision\r\n# set mode to 'route' and set next-queue value.\r\n# On linux >= 3.1, you can set batchcount to a value > 1 to improve performance\r\n# by processing several packets before sending a verdict (worker runmode only).\r\n# On linux >= 3.6, you can set the fail-open option to yes to have the kernel\r\n# accept the packet if suricata is not able to keep pace.\r\n# bypass mark and mask can be used to implement NFQ bypass. If bypass mark is\r\n# set then the NFQ bypass is activated. Suricata will set the bypass mark/mask\r\n# on packet of a flow that need to be bypassed. The Nefilter ruleset has to\r\n# directly accept all packets of a flow once a packet has been marked.\r\nnfq:\r\n#  mode: accept\r\n#  repeat-mark: 1\r\n#  repeat-mask: 1\r\n#  bypass-mark: 1\r\n#  bypass-mask: 1\r\n#  route-queue: 2\r\n#  batchcount: 20\r\n#  fail-open: yes\r\n\r\n#nflog support\r\nnflog:\r\n    # netlink multicast group\r\n    # (the same as the iptables --nflog-group param)\r\n    # Group 0 is used by the kernel, so you can't use it\r\n  - group: 2\r\n    # netlink buffer size\r\n    buffer-size: 18432\r\n    # put default value here\r\n  - group: default\r\n    # set number of packet to queue inside kernel\r\n    qthreshold: 1\r\n    # set the delay before flushing packet in the queue inside kernel\r\n    qtimeout: 100\r\n    # netlink max buffer size\r\n    max-size: 20000\r\n\r\n##\r\n## Advanced Capture Options\r\n##\r\n\r\n# general settings affecting packet capture\r\ncapture:\r\n  # disable NIC offloading. It's restored when Suricata exists.\r\n  # Enabled by default\r\n  #disable-offloading: false\r\n  #\r\n  # disable checksum validation. Same as setting '-k none' on the\r\n  # commandline\r\n  #checksum-validation: none\r\n\r\n# Netmap support\r\n#\r\n# Netmap operates with NIC directly in driver, so you need FreeBSD wich have\r\n# built-in netmap support or compile and install netmap module and appropriate\r\n# NIC driver on your Linux system.\r\n# To reach maximum throughput disable all receive-, segmentation-,\r\n# checksum- offloadings on NIC.\r\n# Disabling Tx checksum offloading is *required* for connecting OS endpoint\r\n# with NIC endpoint.\r\n# You can find more information at https://github.com/luigirizzo/netmap\r\n#\r\nnetmap:\r\n   # To specify OS endpoint add plus sign at the end (e.g. \"eth0+\")\r\n - interface: eth2\r\n   # Number of receive threads. \"auto\" uses number of RSS queues on interface.\r\n   #threads: auto\r\n   # You can use the following variables to activate netmap tap or IPS mode.\r\n   # If copy-mode is set to ips or tap, the traffic coming to the current\r\n   # interface will be copied to the copy-iface interface. If 'tap' is set, the\r\n   # copy is complete. If 'ips' is set, the packet matching a 'drop' action\r\n   # will not be copied.\r\n   # To specify the OS as the copy-iface (so the OS can route packets, or forward\r\n   # to a service running on the same machine) add a plus sign at the end\r\n   # (e.g. \"copy-iface: eth0+\"). Don't forget to set up a symmetrical eth0+ -> eth0\r\n   # for return packets. Hardware checksumming must be *off* on the interface if\r\n   # using an OS endpoint (e.g. 'ifconfig eth0 -rxcsum -txcsum -rxcsum6 -txcsum6' for FreeBSD\r\n   # or 'ethtool -K eth0 tx off rx off' for Linux).\r\n   #copy-mode: tap\r\n   #copy-iface: eth3\r\n   # Set to yes to disable promiscuous mode\r\n   # disable-promisc: no\r\n   # Choose checksum verification mode for the interface. At the moment\r\n   # of the capture, some packets may be with an invalid checksum due to\r\n   # offloading to the network card of the checksum computation.\r\n   # Possible values are:\r\n   #  - yes: checksum validation is forced\r\n   #  - no: checksum validation is disabled\r\n   #  - auto: suricata uses a statistical approach to detect when\r\n   #  checksum off-loading is used.\r\n   # Warning: 'checksum-validation' must be set to yes to have any validation\r\n   #checksum-checks: auto\r\n   # BPF filter to apply to this interface. The pcap filter syntax apply here.\r\n   #bpf-filter: port 80 or udp\r\n #- interface: eth3\r\n   #threads: auto\r\n   #copy-mode: tap\r\n   #copy-iface: eth2\r\n   # Put default values here\r\n - interface: default\r\n\r\n# PF_RING configuration. for use with native PF_RING support\r\n# for more info see http://www.ntop.org/products/pf_ring/\r\npfring:\r\n  - interface: eth0\r\n    # Number of receive threads (>1 will enable experimental flow pinned\r\n    # runmode)\r\n    threads: 1\r\n\r\n    # Default clusterid.  PF_RING will load balance packets based on flow.\r\n    # All threads/processes that will participate need to have the same\r\n    # clusterid.\r\n    cluster-id: 99\r\n\r\n    # Default PF_RING cluster type. PF_RING can load balance per flow.\r\n    # Possible values are cluster_flow or cluster_round_robin.\r\n    cluster-type: cluster_flow\r\n    # bpf filter for this interface\r\n    #bpf-filter: tcp\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - rxonly: only compute checksum for packets received by network card.\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used. (default)\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: auto\r\n  # Second interface\r\n  #- interface: eth1\r\n  #  threads: 3\r\n  #  cluster-id: 93\r\n  #  cluster-type: cluster_flow\r\n  # Put default values here\r\n  - interface: default\r\n    #threads: 2\r\n\r\n# For FreeBSD ipfw(8) divert(4) support.\r\n# Please make sure you have ipfw_load=\"YES\" and ipdivert_load=\"YES\"\r\n# in /etc/loader.conf or kldload'ing the appropriate kernel modules.\r\n# Additionally, you need to have an ipfw rule for the engine to see\r\n# the packets from ipfw.  For Example:\r\n#\r\n#   ipfw add 100 divert 8000 ip from any to any\r\n#\r\n# The 8000 above should be the same number you passed on the command\r\n# line, i.e. -d 8000\r\n#\r\nipfw:\r\n\r\n  # Reinject packets at the specified ipfw rule number.  This config\r\n  # option is the ipfw rule number AT WHICH rule processing continues\r\n  # in the ipfw processing system after the engine has finished\r\n  # inspecting the packet for acceptance.  If no rule number is specified,\r\n  # accepted packets are reinjected at the divert rule which they entered\r\n  # and IPFW rule processing continues.  No check is done to verify\r\n  # this will rule makes sense so care must be taken to avoid loops in ipfw.\r\n  #\r\n  ## The following example tells the engine to reinject packets\r\n  # back into the ipfw firewall AT rule number 5500:\r\n  #\r\n  # ipfw-reinjection-rule-number: 5500\r\n\r\n\r\nnapatech:\r\n    # The Host Buffer Allowance for all streams\r\n    # (-1 = OFF, 1 - 100 = percentage of the host buffer that can be held back)\r\n    hba: -1\r\n\r\n    # use_all_streams set to \"yes\" will query the Napatech service for all configured\r\n    # streams and listen on all of them. When set to \"no\" the streams config array\r\n    # will be used.\r\n    use-all-streams: yes\r\n\r\n    # The streams to listen on\r\n    streams: [1, 2, 3]\r\n\r\n# Tilera mpipe configuration. for use on Tilera TILE-Gx.\r\nmpipe:\r\n\r\n  # Load balancing modes: \"static\", \"dynamic\", \"sticky\", or \"round-robin\".\r\n  load-balance: dynamic\r\n\r\n  # Number of Packets in each ingress packet queue. Must be 128, 512, 2028 or 65536\r\n  iqueue-packets: 2048\r\n\r\n  # List of interfaces we will listen on.\r\n  inputs:\r\n  - interface: xgbe2\r\n  - interface: xgbe3\r\n  - interface: xgbe4\r\n\r\n\r\n  # Relative weight of memory for packets of each mPipe buffer size.\r\n  stack:\r\n    size128: 0\r\n    size256: 9\r\n    size512: 0\r\n    size1024: 0\r\n    size1664: 7\r\n    size4096: 0\r\n    size10386: 0\r\n    size16384: 0\r\n\r\n##\r\n## Hardware accelaration\r\n##\r\n\r\n# Cuda configuration.\r\ncuda:\r\n  # The \"mpm\" profile.  On not specifying any of these parameters, the engine's\r\n  # internal default values are used, which are same as the ones specified in\r\n  # in the default conf file.\r\n  mpm:\r\n    # The minimum length required to buffer data to the gpu.\r\n    # Anything below this is MPM'ed on the CPU.\r\n    # Can be specified in kb, mb, gb.  Just a number indicates it's in bytes.\r\n    # A value of 0 indicates there's no limit.\r\n    data-buffer-size-min-limit: 0\r\n    # The maximum length for data that we would buffer to the gpu.\r\n    # Anything over this is MPM'ed on the CPU.\r\n    # Can be specified in kb, mb, gb.  Just a number indicates it's in bytes.\r\n    data-buffer-size-max-limit: 1500\r\n    # The ring buffer size used by the CudaBuffer API to buffer data.\r\n    cudabuffer-buffer-size: 500mb\r\n    # The max chunk size that can be sent to the gpu in a single go.\r\n    gpu-transfer-size: 50mb\r\n    # The timeout limit for batching of packets in microseconds.\r\n    batching-timeout: 2000\r\n    # The device to use for the mpm.  Currently we don't support load balancing\r\n    # on multiple gpus.  In case you have multiple devices on your system, you\r\n    # can specify the device to use, using this conf.  By default we hold 0, to\r\n    # specify the first device cuda sees.  To find out device-id associated with\r\n    # the card(s) on the system run \"suricata --list-cuda-cards\".\r\n    device-id: 0\r\n    # No of Cuda streams used for asynchronous processing. All values > 0 are valid.\r\n    # For this option you need a device with Compute Capability > 1.0.\r\n    cuda-streams: 2\r\n\r\n##\r\n## Include other configs\r\n##\r\n\r\n# Includes.  Files included here will be handled as if they were\r\n# inlined in this configuration file.\r\n#include: include1.yaml\r\n#include: include2.yaml",
      "conf_stats": false,
      "conf_afpacket_interface": "eth0",
      "conf_outputs_fast": false,
      "conf_outputs_unified2alert": false,
      "conf_outputs_evelog": true,
      "conf_outputs_evelog_alert_taggedpackets": false,
      "conf_outputs_evelog_alert_http": true,
      "conf_outputs_evelog_alert_tls": true,
      "conf_outputs_evelog_alert_ssh": true,
      "conf_outputs_evelog_alert_dnp3": true,
      "conf_outputs_evelog_xff": false,
      "conf_outputs_evelog_dns_query": true,
      "conf_outputs_evelog_dns_answer": true,
      "conf_outputs_evelog_tls_extended": true,
      "conf_outputs_evelog_files_forcemagic": false,
      "conf_lua": false,
      "conf_applayer_tls": 0,
      "conf_applayer_dcerpc": 0,
      "conf_applayer_ftp": 0,
      "conf_applayer_ssh": 0,
      "conf_applayer_smtp": 0,
      "conf_applayer_imap": 2,
      "conf_applayer_msn": 2,
      "conf_applayer_smb": 0,
      "conf_applayer_dns": 0,
      "conf_HOME_NET": "[192.168.0.0/24]",
      "conf_EXTERNAL_NET": "!$HOME_NET",
      "conf_HTTP_SERVERS": "$HOME_NET",
      "conf_SMTP_SERVERS": "$HOME_NET",
      "conf_SQL_SERVERS": "$HOME_NET",
      "conf_DNS_SERVERS": "$HOME_NET",
      "conf_TELNET_SERVERS": "$HOME_NET",
      "conf_AIM_SERVERS": "$EXTERNAL_NET",
      "conf_DNP3_SERVER": "$HOME_NET",
      "conf_DNP3_CLIENT": "$HOME_NET",
      "conf_MODBUS_CLIENT": "$HOME_NET",
      "conf_MODBUS_SERVER": "$HOME_NET",
      "conf_ENIP_CLIENT": "$HOME_NET",
      "conf_ENIP_SERVER": "$HOME_NET",
      "conf_HTTP_PORTS": "80",
      "conf_SHELLCODE_PORTS": "!80",
      "conf_ORACLE_PORTS": "1521",
      "conf_SSH_PORTS": "22",
      "conf_DNP3_PORTS": "20000",
      "conf_MODBUS_PORTS": "502"
    }
  },
  {
    "model": "suricata.confsuricata",
    "pk": 2,
    "fields": {
      "conf_rules_directory": "/etc/suricata/rules",
      "conf_script_directory": "/etc/suricata/lua",
      "conf_iprep_directory": "/etc/suricata/iprep",
      "conf_file": "/etc/suricata/suricata.yaml",
      "conf_advanced": false,
      "conf_advanced_text": "%YAML 1.1\r\n---\r\n\r\n# Suricata configuration file. In addition to the comments describing all\r\n# options in this file, full documentation can be found at:\r\n# https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricatayaml\r\n\r\n##\r\n## Step 1: inform Suricata about your network\r\n##\r\n\r\nvars:\r\n  # more specifc is better for alert accuracy and performance\r\n  address-groups:\r\n    HOME_NET: \"[192.168.0.0/24]\"\r\n    #HOME_NET: \"[192.168.0.0/16]\"\r\n    #HOME_NET: \"[10.0.0.0/8]\"\r\n    #HOME_NET: \"[172.16.0.0/12]\"\r\n    #HOME_NET: \"any\"\r\n\r\n    EXTERNAL_NET: \"!$HOME_NET\"\r\n    #EXTERNAL_NET: \"any\"\r\n\r\n    HTTP_SERVERS: \"$HOME_NET\"\r\n    SMTP_SERVERS: \"$HOME_NET\"\r\n    SQL_SERVERS: \"$HOME_NET\"\r\n    DNS_SERVERS: \"$HOME_NET\"\r\n    TELNET_SERVERS: \"$HOME_NET\"\r\n    AIM_SERVERS: \"$EXTERNAL_NET\"\r\n    DNP3_SERVER: \"$HOME_NET\"\r\n    DNP3_CLIENT: \"$HOME_NET\"\r\n    MODBUS_CLIENT: \"$HOME_NET\"\r\n    MODBUS_SERVER: \"$HOME_NET\"\r\n    ENIP_CLIENT: \"$HOME_NET\"\r\n    ENIP_SERVER: \"$HOME_NET\"\r\n\r\n  port-groups:\r\n    HTTP_PORTS: \"80\"\r\n    SHELLCODE_PORTS: \"!80\"\r\n    ORACLE_PORTS: 1521\r\n    SSH_PORTS: 22\r\n    DNP3_PORTS: 20000\r\n    MODBUS_PORTS: 502\r\n\r\n\r\n##\r\n## Step 2: select the rules to enable or disable\r\n##\r\ndefault-rule-path: /etc/suricata/rules\r\nrule-files:\r\n - deployed.rules\r\n\r\nclassification-file: /etc/suricata/classification.config\r\nreference-config-file: /etc/suricata/reference.config\r\n# threshold-file: /etc/suricata/threshold.config\r\n\r\n\r\n##\r\n## Step 3: select outputs to enable\r\n##\r\n\r\n# The default logging directory.  Any log or output file will be\r\n# placed here if its not specified with a full path name. This can be\r\n# overridden with the -l command line parameter.\r\ndefault-log-dir: /var/log/suricata/\r\n\r\n# global stats configuration\r\nstats:\r\n  enabled: yes\r\n  # The interval field (in seconds) controls at what interval\r\n  # the loggers are invoked.\r\n  interval: 8\r\n\r\n# Configure the type of alert (and other) logging you would like.\r\noutputs:\r\n  # a line based alerts log similar to Snort's fast.log\r\n  - fast:\r\n      enabled: no\r\n      filename: fast.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # Extensible Event Format (nicknamed EVE) event log in JSON format\r\n  - eve-log:\r\n      enabled: yes\r\n      filetype: regular #regular|syslog|unix_dgram|unix_stream|redis\r\n      filename: eve.json\r\n      #prefix: \"@cee: \" # prefix to prepend to each log entry\r\n      # the following are valid when type: syslog above\r\n      #identity: \"suricata\"\r\n      #facility: local5\r\n      #level: Info ## possible levels: Emergency, Alert, Critical,\r\n                   ## Error, Warning, Notice, Info, Debug\r\n      #redis:\r\n      #  server: 127.0.0.1\r\n      #  port: 6379\r\n      #  mode: list ## possible values: list (default), channel\r\n      #  key: suricata ## key or channel to use (default to suricata)\r\n      # Redis pipelining set up. This will enable to only do a query every\r\n      # 'batch-size' events. This should lower the latency induced by network\r\n      # connection at the cost of some memory. There is no flushing implemented\r\n      # so this setting as to be reserved to high traffic suricata.\r\n      #  pipelining:\r\n      #    enabled: yes ## set enable to yes to enable query pipelining\r\n      #    batch-size: 10 ## number of entry to keep in buffer\r\n      types:\r\n        - alert:\r\n            # payload: yes             # enable dumping payload in Base64\r\n            # payload-buffer-size: 4kb # max size of payload buffer to output in eve-log\r\n            # payload-printable: yes   # enable dumping payload in printable (lossy) format\r\n            # packet: yes              # enable dumping of packet (without stream segments)\r\n            http: yes                # enable dumping of http fields\r\n            tls: yes                 # enable dumping of tls fields\r\n            ssh: yes                 # enable dumping of ssh fields\r\n            smtp: yes                # enable dumping of smtp fields\r\n            dnp3: yes                # enable dumping of DNP3 fields\r\n\r\n            # Enable the logging of tagged packets for rules using the\r\n            # \"tag\" keyword.\r\n            tagged-packets: yes\r\n\r\n            # HTTP X-Forwarded-For support by adding an extra field or overwriting\r\n            # the source or destination IP address (depending on flow direction)\r\n            # with the one reported in the X-Forwarded-For HTTP header. This is\r\n            # helpful when reviewing alerts for traffic that is being reverse\r\n            # or forward proxied.\r\n            xff:\r\n              enabled: no\r\n              # Two operation modes are available, \"extra-data\" and \"overwrite\".\r\n              mode: extra-data\r\n              # Two proxy deployments are supported, \"reverse\" and \"forward\". In\r\n              # a \"reverse\" deployment the IP address used is the last one, in a\r\n              # \"forward\" deployment the first IP address is used.\r\n              deployment: reverse\r\n              # Header name where the actual IP address will be reported, if more\r\n              # than one IP address is present, the last IP address will be the\r\n              # one taken into consideration.\r\n              header: X-Forwarded-For\r\n        - http:\r\n            extended: yes     # enable this for extended logging information\r\n            # custom allows additional http fields to be included in eve-log\r\n            # the example below adds three additional fields when uncommented\r\n            #custom: [Accept-Encoding, Accept-Language, Authorization]\r\n        - dns:\r\n            # control logging of queries and answers\r\n            # default yes, no to disable\r\n            query: yes     # enable logging of DNS queries\r\n            answer: yes    # enable logging of DNS answers\r\n            # control which RR types are logged\r\n            # all enabled if custom not specified\r\n            #custom: [a, aaaa, cname, mx, ns, ptr, txt]\r\n        - tls:\r\n            extended: yes     # enable this for extended logging information\r\n        - files:\r\n            force-magic: no   # force logging magic on all logged files\r\n            # force logging of checksums, available hash functions are md5,\r\n            # sha1 and sha256\r\n            #force-hash: [md5]\r\n        #- drop:\r\n        #    alerts: yes      # log alerts that caused drops\r\n        #    flows: all       # start or all: 'start' logs only a single drop\r\n        #                     # per flow direction. All logs each dropped pkt.\r\n        - smtp:\r\n            extended: yes # enable this for extended logging information\r\n            # this includes: bcc, message-id, subject, x_mailer, user-agent\r\n            # custom fields logging from the list:\r\n            #  reply-to, bcc, message-id, subject, x-mailer, user-agent, received,\r\n            #  x-originating-ip, in-reply-to, references, importance, priority,\r\n            #  sensitivity, organization, content-md5, date\r\n            #custom: [received, x-mailer, x-originating-ip, relays, reply-to, bcc]\r\n            # output md5 of fields: body, subject\r\n            # for the body you need to set app-layer.protocols.smtp.mime.body-md5\r\n            # to yes\r\n            #md5: [body, subject]\r\n\r\n        - ssh\r\n        - stats:\r\n            totals: yes       # stats for all threads merged together\r\n            threads: no       # per thread stats\r\n            deltas: no        # include delta values\r\n        # bi-directional flows\r\n        - flow\r\n        # uni-directional flows\r\n        #- netflow\r\n        #- dnp3\r\n\r\n  # alert output for use with Barnyard2\r\n  - unified2-alert:\r\n      enabled: no\r\n      filename: unified2.alert\r\n\r\n      # File size limit.  Can be specified in kb, mb, gb.  Just a number\r\n      # is parsed as bytes.\r\n      #limit: 32mb\r\n\r\n      # Sensor ID field of unified2 alerts.\r\n      #sensor-id: 0\r\n\r\n      # Include payload of packets related to alerts. Defaults to true, set to\r\n      # false if payload is not required.\r\n      #payload: yes\r\n\r\n      # HTTP X-Forwarded-For support by adding the unified2 extra header or\r\n      # overwriting the source or destination IP address (depending on flow\r\n      # direction) with the one reported in the X-Forwarded-For HTTP header.\r\n      # This is helpful when reviewing alerts for traffic that is being reverse\r\n      # or forward proxied.\r\n      xff:\r\n        enabled: no\r\n        # Two operation modes are available, \"extra-data\" and \"overwrite\". Note\r\n        # that in the \"overwrite\" mode, if the reported IP address in the HTTP\r\n        # X-Forwarded-For header is of a different version of the packet\r\n        # received, it will fall-back to \"extra-data\" mode.\r\n        mode: extra-data\r\n        # Two proxy deployments are supported, \"reverse\" and \"forward\". In\r\n        # a \"reverse\" deployment the IP address used is the last one, in a\r\n        # \"forward\" deployment the first IP address is used.\r\n        deployment: reverse\r\n        # Header name where the actual IP address will be reported, if more\r\n        # than one IP address is present, the last IP address will be the\r\n        # one taken into consideration.\r\n        header: X-Forwarded-For\r\n\r\n  # a line based log of HTTP requests (no alerts)\r\n  - http-log:\r\n      enabled: no\r\n      filename: http.log\r\n      append: yes\r\n      #extended: yes     # enable this for extended logging information\r\n      #custom: yes       # enabled the custom logging format (defined by customformat)\r\n      #customformat: \"%{%D-%H:%M:%S}t.%z %{X-Forwarded-For}i %H %m %h %u %s %B %a:%p -> %A:%P\"\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # a line based log of TLS handshake parameters (no alerts)\r\n  - tls-log:\r\n      enabled: no  # Log TLS connections.\r\n      filename: tls.log # File to store TLS logs.\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n      #extended: yes # Log extended information like fingerprint\r\n\r\n  # output module to store certificates chain to disk\r\n  - tls-store:\r\n      enabled: no\r\n      #certs-log-dir: certs # directory to store the certificates files\r\n\r\n  # a line based log of DNS requests and/or replies (no alerts)\r\n  - dns-log:\r\n      enabled: no\r\n      filename: dns.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # Packet log... log packets in pcap format. 3 modes of operation: \"normal\"\r\n  # \"multi\" and \"sguil\".\r\n  #\r\n  # In normal mode a pcap file \"filename\" is created in the default-log-dir,\r\n  # or are as specified by \"dir\".\r\n  # In multi mode, a file is created per thread. This will perform much\r\n  # better, but will create multiple files where 'normal' would create one.\r\n  # In multi mode the filename takes a few special variables:\r\n  # - %n -- thread number\r\n  # - %i -- thread id\r\n  # - %t -- timestamp (secs or secs.usecs based on 'ts-format'\r\n  # E.g. filename: pcap.%n.%t\r\n  #\r\n  # Note that it's possible to use directories, but the directories are not\r\n  # created by Suricata. E.g. filename: pcaps/%n/log.%s will log into the\r\n  # per thread directory.\r\n  #\r\n  # Also note that the limit and max-files settings are enforced per thread.\r\n  # So the size limit when using 8 threads with 1000mb files and 2000 files\r\n  # is: 8*1000*2000 ~ 16TiB.\r\n  #\r\n  # In Sguil mode \"dir\" indicates the base directory. In this base dir the\r\n  # pcaps are created in th directory structure Sguil expects:\r\n  #\r\n  # $sguil-base-dir/YYYY-MM-DD/$filename.<timestamp>\r\n  #\r\n  # By default all packets are logged except:\r\n  # - TCP streams beyond stream.reassembly.depth\r\n  # - encrypted streams after the key exchange\r\n  #\r\n  - pcap-log:\r\n      enabled: no\r\n      filename: log.pcap\r\n\r\n      # File size limit.  Can be specified in kb, mb, gb.  Just a number\r\n      # is parsed as bytes.\r\n      limit: 1000mb\r\n\r\n      # If set to a value will enable ring buffer mode. Will keep Maximum of \"max-files\" of size \"limit\"\r\n      max-files: 2000\r\n\r\n      mode: normal # normal, multi or sguil.\r\n\r\n      # Directory to place pcap files. If not provided the default log\r\n      # directory will be used. Required for \"sguil\" mode.\r\n      #dir: /nsm_data/\r\n\r\n      #ts-format: usec # sec or usec second format (default) is filename.sec usec is filename.sec.usec\r\n      use-stream-depth: no #If set to \"yes\" packets seen after reaching stream inspection depth are ignored. \"no\" logs all packets\r\n      honor-pass-rules: no # If set to \"yes\", flows in which a pass rule matched will stopped being logged.\r\n\r\n  # a full alerts log containing much information for signature writers\r\n  # or for investigating suspected false positives.\r\n  - alert-debug:\r\n      enabled: no\r\n      filename: alert-debug.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # alert output to prelude (http://www.prelude-technologies.com/) only\r\n  # available if Suricata has been compiled with --enable-prelude\r\n  - alert-prelude:\r\n      enabled: no\r\n      profile: suricata\r\n      log-packet-content: no\r\n      log-packet-header: yes\r\n\r\n  # Stats.log contains data from various counters of the suricata engine.\r\n  - stats:\r\n      enabled: yes\r\n      filename: stats.log\r\n      totals: yes       # stats for all threads merged together\r\n      threads: no       # per thread stats\r\n      #null-values: yes  # print counters that have value 0\r\n\r\n  # a line based alerts log similar to fast.log into syslog\r\n  - syslog:\r\n      enabled: no\r\n      # reported identity to syslog. If ommited the program name (usually\r\n      # suricata) will be used.\r\n      #identity: \"suricata\"\r\n      facility: local5\r\n      #level: Info ## possible levels: Emergency, Alert, Critical,\r\n                   ## Error, Warning, Notice, Info, Debug\r\n\r\n  # a line based information for dropped packets in IPS mode\r\n  - drop:\r\n      enabled: no\r\n      filename: drop.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n  # output module to store extracted files to disk\r\n  #\r\n  # The files are stored to the log-dir in a format \"file.<id>\" where <id> is\r\n  # an incrementing number starting at 1. For each file \"file.<id>\" a meta\r\n  # file \"file.<id>.meta\" is created.\r\n  #\r\n  # File extraction depends on a lot of things to be fully done:\r\n  # - file-store stream-depth. For optimal results, set this to 0 (unlimited)\r\n  # - http request / response body sizes. Again set to 0 for optimal results.\r\n  # - rules that contain the \"filestore\" keyword.\r\n  - file-store:\r\n      enabled: no       # set to yes to enable\r\n      log-dir: files    # directory to store the files\r\n      force-magic: no   # force logging magic on all stored files\r\n      # force logging of checksums, available hash functions are md5,\r\n      # sha1 and sha256\r\n      #force-hash: [md5]\r\n      force-filestore: no # force storing of all files\r\n      # override global stream-depth for sessions in which we want to\r\n      # perform file extraction. Set to 0 for unlimited.\r\n      #stream-depth: 0\r\n      #waldo: file.waldo # waldo file to store the file_id across runs\r\n\r\n  # output module to log files tracked in a easily parsable json format\r\n  - file-log:\r\n      enabled: no\r\n      filename: files-json.log\r\n      append: yes\r\n      #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'\r\n\r\n      force-magic: no   # force logging magic on all logged files\r\n      # force logging of checksums, available hash functions are md5,\r\n      # sha1 and sha256\r\n      #force-hash: [md5]\r\n\r\n  # Log TCP data after stream normalization\r\n  # 2 types: file or dir. File logs into a single logfile. Dir creates\r\n  # 2 files per TCP session and stores the raw TCP data into them.\r\n  # Using 'both' will enable both file and dir modes.\r\n  #\r\n  # Note: limited by stream.depth\r\n  - tcp-data:\r\n      enabled: no\r\n      type: file\r\n      filename: tcp-data.log\r\n\r\n  # Log HTTP body data after normalization, dechunking and unzipping.\r\n  # 2 types: file or dir. File logs into a single logfile. Dir creates\r\n  # 2 files per HTTP session and stores the normalized data into them.\r\n  # Using 'both' will enable both file and dir modes.\r\n  #\r\n  # Note: limited by the body limit settings\r\n  - http-body-data:\r\n      enabled: no\r\n      type: file\r\n      filename: http-data.log\r\n\r\n  # Lua Output Support - execute lua script to generate alert and event\r\n  # output.\r\n  # Documented at:\r\n  # https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Lua_Output\r\n  - lua:\r\n      enabled: yes\r\n      scripts-dir: /etc/suricata/lua/\r\n      # scripts:\r\n      #   - script1.lua\r\n\r\n# Logging configuration.  This is not about logging IDS alerts/events, but\r\n# output about what Suricata is doing, like startup messages, errors, etc.\r\nlogging:\r\n  # The default log level, can be overridden in an output section.\r\n  # Note that debug level logging will only be emitted if Suricata was\r\n  # compiled with the --enable-debug configure option.\r\n  #\r\n  # This value is overriden by the SC_LOG_LEVEL env var.\r\n  default-log-level: notice\r\n\r\n  # The default output format.  Optional parameter, should default to\r\n  # something reasonable if not provided.  Can be overriden in an\r\n  # output section.  You can leave this out to get the default.\r\n  #\r\n  # This value is overriden by the SC_LOG_FORMAT env var.\r\n  #default-log-format: \"[%i] %t - (%f:%l) <%d> (%n) -- \"\r\n\r\n  # A regex to filter output.  Can be overridden in an output section.\r\n  # Defaults to empty (no filter).\r\n  #\r\n  # This value is overriden by the SC_LOG_OP_FILTER env var.\r\n  default-output-filter:\r\n\r\n  # Define your logging outputs.  If none are defined, or they are all\r\n  # disabled you will get the default - console output.\r\n  outputs:\r\n  - console:\r\n      enabled: yes\r\n      # type: json\r\n  - file:\r\n      enabled: yes\r\n      level: info\r\n      filename: /var/log/suricata/suricata.log\r\n      # type: json\r\n  - syslog:\r\n      enabled: no\r\n      facility: local5\r\n      format: \"[%i] <%d> -- \"\r\n      # type: json\r\n\r\n\r\n##\r\n## Step 4: configure common capture settings\r\n##\r\n## See \"Advanced Capture Options\" below for more options, including NETMAP\r\n## and PF_RING.\r\n##\r\n\r\n# Linux high speed capture support\r\naf-packet:\r\n  - interface: eth0\r\n    # Number of receive threads. \"auto\" uses the number of cores\r\n    #threads: auto\r\n    # Default clusterid. AF_PACKET will load balance packets based on flow.\r\n    cluster-id: 99\r\n    # Default AF_PACKET cluster type. AF_PACKET can load balance per flow or per hash.\r\n    # This is only supported for Linux kernel > 3.1\r\n    # possible value are:\r\n    #  * cluster_round_robin: round robin load balancing\r\n    #  * cluster_flow: all packets of a given flow are send to the same socket\r\n    #  * cluster_cpu: all packets treated in kernel by a CPU are send to the same socket\r\n    #  * cluster_qm: all packets linked by network card to a RSS queue are sent to the same\r\n    #  socket. Requires at least Linux 3.14.\r\n    #  * cluster_random: packets are sent randomly to sockets but with an equipartition.\r\n    #  Requires at least Linux 3.14.\r\n    #  * cluster_rollover: kernel rotates between sockets filling each socket before moving\r\n    #  to the next. Requires at least Linux 3.10.\r\n    # Recommended modes are cluster_flow on most boxes and cluster_cpu or cluster_qm on system\r\n    # with capture card using RSS (require cpu affinity tuning and system irq tuning)\r\n    cluster-type: cluster_flow\r\n    # In some fragmentation case, the hash can not be computed. If \"defrag\" is set\r\n    # to yes, the kernel will do the needed defragmentation before sending the packets.\r\n    defrag: yes\r\n    # After Linux kernel 3.10 it is possible to activate the rollover option: if a socket is\r\n    # full then kernel will send the packet on the next socket with room available. This option\r\n    # can minimize packet drop and increase the treated bandwidth on single intensive flow.\r\n    #rollover: yes\r\n    # To use the ring feature of AF_PACKET, set 'use-mmap' to yes\r\n    #use-mmap: yes\r\n    # Lock memory map to avoid it goes to swap. Be careful that over suscribing could lock\r\n    # your system\r\n    #mmap-locked: yes\r\n    # Use experimental tpacket_v3 capture mode, only active if use-mmap is true\r\n    #tpacket-v3: yes\r\n    # Ring size will be computed with respect to max_pending_packets and number\r\n    # of threads. You can set manually the ring size in number of packets by setting\r\n    # the following value. If you are using flow cluster-type and have really network\r\n    # intensive single-flow you could want to set the ring-size independently of the number\r\n    # of threads:\r\n    #ring-size: 2048\r\n    # Block size is used by tpacket_v3 only. It should set to a value high enough to contain\r\n    # a decent number of packets. Size is in bytes so please consider your MTU. It should be\r\n    # a power of 2 and it must be multiple of page size (usually 4096).\r\n    #block-size: 32768\r\n    # tpacket_v3 block timeout: an open block is passed to userspace if it is not\r\n    # filled after block-timeout milliseconds.\r\n    #block-timeout: 10\r\n    # On busy system, this could help to set it to yes to recover from a packet drop\r\n    # phase. This will result in some packets (at max a ring flush) being non treated.\r\n    #use-emergency-flush: yes\r\n    # recv buffer size, increase value could improve performance\r\n    # buffer-size: 32768\r\n    # Set to yes to disable promiscuous mode\r\n    # disable-promisc: no\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - kernel: use indication sent by kernel for each packet (default)\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used.\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: kernel\r\n    # BPF filter to apply to this interface. The pcap filter syntax apply here.\r\n    #bpf-filter: port 80 or udp\r\n    # You can use the following variables to activate AF_PACKET tap or IPS mode.\r\n    # If copy-mode is set to ips or tap, the traffic coming to the current\r\n    # interface will be copied to the copy-iface interface. If 'tap' is set, the\r\n    # copy is complete. If 'ips' is set, the packet matching a 'drop' action\r\n    # will not be copied.\r\n    #copy-mode: ips\r\n    #copy-iface: eth1\r\n\r\n  # Put default values here. These will be used for an interface that is not\r\n  # in the list above.\r\n  - interface: default\r\n    #threads: auto\r\n    #use-mmap: no\r\n    #rollover: yes\r\n    #tpacket-v3: yes\r\n\r\n# Cross platform libpcap capture support\r\npcap:\r\n  - interface: eth0\r\n    # On Linux, pcap will try to use mmaped capture and will use buffer-size\r\n    # as total of memory used by the ring. So set this to something bigger\r\n    # than 1% of your bandwidth.\r\n    #buffer-size: 16777216\r\n    #bpf-filter: \"tcp and port 25\"\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used. (default)\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: auto\r\n    # With some accelerator cards using a modified libpcap (like myricom), you\r\n    # may want to have the same number of capture threads as the number of capture\r\n    # rings. In this case, set up the threads variable to N to start N threads\r\n    # listening on the same interface.\r\n    #threads: 16\r\n    # set to no to disable promiscuous mode:\r\n    #promisc: no\r\n    # set snaplen, if not set it defaults to MTU if MTU can be known\r\n    # via ioctl call and to full capture if not.\r\n    #snaplen: 1518\r\n  # Put default values here\r\n  - interface: default\r\n    #checksum-checks: auto\r\n\r\n# Settings for reading pcap files\r\npcap-file:\r\n  # Possible values are:\r\n  #  - yes: checksum validation is forced\r\n  #  - no: checksum validation is disabled\r\n  #  - auto: suricata uses a statistical approach to detect when\r\n  #  checksum off-loading is used. (default)\r\n  # Warning: 'checksum-validation' must be set to yes to have checksum tested\r\n  checksum-checks: auto\r\n\r\n# See \"Advanced Capture Options\" below for more options, including NETMAP\r\n# and PF_RING.\r\n\r\n\r\n##\r\n## Step 5: App Layer Protocol Configuration\r\n##\r\n\r\n# Configure the app-layer parsers. The protocols section details each\r\n# protocol.\r\n#\r\n# The option \"enabled\" takes 3 values - \"yes\", \"no\", \"detection-only\".\r\n# \"yes\" enables both detection and the parser, \"no\" disables both, and\r\n# \"detection-only\" enables protocol detection only (parser disabled).\r\napp-layer:\r\n  protocols:\r\n    tls:\r\n      enabled: yes\r\n      detection-ports:\r\n        dp: 443\r\n\r\n      # Completely stop processing TLS/SSL session after the handshake\r\n      # completed. If bypass is enabled this will also trigger flow\r\n      # bypass. If disabled (the default), TLS/SSL session is still\r\n      # tracked for Heartbleed and other anomalies.\r\n      #no-reassemble: yes\r\n    dcerpc:\r\n      enabled: yes\r\n    ftp:\r\n      enabled: yes\r\n    ssh:\r\n      enabled: yes\r\n    smtp:\r\n      enabled: yes\r\n      # Configure SMTP-MIME Decoder\r\n      mime:\r\n        # Decode MIME messages from SMTP transactions\r\n        # (may be resource intensive)\r\n        # This field supercedes all others because it turns the entire\r\n        # process on or off\r\n        decode-mime: yes\r\n\r\n        # Decode MIME entity bodies (ie. base64, quoted-printable, etc.)\r\n        decode-base64: yes\r\n        decode-quoted-printable: yes\r\n\r\n        # Maximum bytes per header data value stored in the data structure\r\n        # (default is 2000)\r\n        header-value-depth: 2000\r\n\r\n        # Extract URLs and save in state data structure\r\n        extract-urls: yes\r\n        # Set to yes to compute the md5 of the mail body. You will then\r\n        # be able to journalize it.\r\n        body-md5: no\r\n      # Configure inspected-tracker for file_data keyword\r\n      inspected-tracker:\r\n        content-limit: 100000\r\n        content-inspect-min-size: 32768\r\n        content-inspect-window: 4096\r\n    imap:\r\n      enabled: detection-only\r\n    msn:\r\n      enabled: detection-only\r\n    smb:\r\n      enabled: yes\r\n      detection-ports:\r\n        dp: 139, 445\r\n    # smb2 detection is disabled internally inside the engine.\r\n    #smb2:\r\n    #  enabled: yes\r\n    dns:\r\n      # memcaps. Globally and per flow/state.\r\n      #global-memcap: 16mb\r\n      #state-memcap: 512kb\r\n\r\n      # How many unreplied DNS requests are considered a flood.\r\n      # If the limit is reached, app-layer-event:dns.flooded; will match.\r\n      #request-flood: 500\r\n\r\n      tcp:\r\n        enabled: yes\r\n        detection-ports:\r\n          dp: 53\r\n      udp:\r\n        enabled: yes\r\n        detection-ports:\r\n          dp: 53\r\n    http:\r\n      enabled: yes\r\n      # memcap: 64mb\r\n\r\n      # default-config:           Used when no server-config matches\r\n      #   personality:            List of personalities used by default\r\n      #   request-body-limit:     Limit reassembly of request body for inspection\r\n      #                           by http_client_body & pcre /P option.\r\n      #   response-body-limit:    Limit reassembly of response body for inspection\r\n      #                           by file_data, http_server_body & pcre /Q option.\r\n      #   double-decode-path:     Double decode path section of the URI\r\n      #   double-decode-query:    Double decode query section of the URI\r\n      #   response-body-decompress-layer-limit:\r\n      #                           Limit to how many layers of compression will be\r\n      #                           decompressed. Defaults to 2.\r\n      #\r\n      # server-config:            List of server configurations to use if address matches\r\n      #   address:                List of ip addresses or networks for this block\r\n      #   personalitiy:           List of personalities used by this block\r\n      #   request-body-limit:     Limit reassembly of request body for inspection\r\n      #                           by http_client_body & pcre /P option.\r\n      #   response-body-limit:    Limit reassembly of response body for inspection\r\n      #                           by file_data, http_server_body & pcre /Q option.\r\n      #   double-decode-path:     Double decode path section of the URI\r\n      #   double-decode-query:    Double decode query section of the URI\r\n      #\r\n      #   uri-include-all:        Include all parts of the URI. By default the\r\n      #                           'scheme', username/password, hostname and port\r\n      #                           are excluded. Setting this option to true adds\r\n      #                           all of them to the normalized uri as inspected\r\n      #                           by http_uri, urilen, pcre with /U and the other\r\n      #                           keywords that inspect the normalized uri.\r\n      #                           Note that this does not affect http_raw_uri.\r\n      #                           Also, note that including all was the default in\r\n      #                           1.4 and 2.0beta1.\r\n      #\r\n      #   meta-field-limit:       Hard size limit for request and response size\r\n      #                           limits. Applies to request line and headers,\r\n      #                           response line and headers. Does not apply to\r\n      #                           request or response bodies. Default is 18k.\r\n      #                           If this limit is reached an event is raised.\r\n      #\r\n      # Currently Available Personalities:\r\n      #   Minimal, Generic, IDS (default), IIS_4_0, IIS_5_0, IIS_5_1, IIS_6_0,\r\n      #   IIS_7_0, IIS_7_5, Apache_2\r\n      libhtp:\r\n         default-config:\r\n           personality: IDS\r\n\r\n           # Can be specified in kb, mb, gb.  Just a number indicates\r\n           # it's in bytes.\r\n           request-body-limit: 100kb\r\n           response-body-limit: 100kb\r\n\r\n           # inspection limits\r\n           request-body-minimal-inspect-size: 32kb\r\n           request-body-inspect-window: 4kb\r\n           response-body-minimal-inspect-size: 40kb\r\n           response-body-inspect-window: 16kb\r\n\r\n           # response body decompression (0 disables)\r\n           response-body-decompress-layer-limit: 2\r\n\r\n           # auto will use http-body-inline mode in IPS mode, yes or no set it statically\r\n           http-body-inline: auto\r\n\r\n           # Take a random value for inspection sizes around the specified value.\r\n           # This lower the risk of some evasion technics but could lead\r\n           # detection change between runs. It is set to 'yes' by default.\r\n           #randomize-inspection-sizes: yes\r\n           # If randomize-inspection-sizes is active, the value of various\r\n           # inspection size will be choosen in the [1 - range%, 1 + range%]\r\n           # range\r\n           # Default value of randomize-inspection-range is 10.\r\n           #randomize-inspection-range: 10\r\n\r\n           # decoding\r\n           double-decode-path: no\r\n           double-decode-query: no\r\n\r\n         server-config:\r\n\r\n           #- apache:\r\n           #    address: [192.168.1.0/24, 127.0.0.0/8, \"::1\"]\r\n           #    personality: Apache_2\r\n           #    # Can be specified in kb, mb, gb.  Just a number indicates\r\n           #    # it's in bytes.\r\n           #    request-body-limit: 4096\r\n           #    response-body-limit: 4096\r\n           #    double-decode-path: no\r\n           #    double-decode-query: no\r\n\r\n           #- iis7:\r\n           #    address:\r\n           #      - 192.168.0.0/24\r\n           #      - 192.168.10.0/24\r\n           #    personality: IIS_7_0\r\n           #    # Can be specified in kb, mb, gb.  Just a number indicates\r\n           #    # it's in bytes.\r\n           #    request-body-limit: 4096\r\n           #    response-body-limit: 4096\r\n           #    double-decode-path: no\r\n           #    double-decode-query: no\r\n\r\n    # Note: Modbus probe parser is minimalist due to the poor significant field\r\n    # Only Modbus message length (greater than Modbus header length)\r\n    # And Protocol ID (equal to 0) are checked in probing parser\r\n    # It is important to enable detection port and define Modbus port\r\n    # to avoid false positive\r\n    modbus:\r\n      # How many unreplied Modbus requests are considered a flood.\r\n      # If the limit is reached, app-layer-event:modbus.flooded; will match.\r\n      #request-flood: 500\r\n\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 502\r\n      # According to MODBUS Messaging on TCP/IP Implementation Guide V1.0b, it\r\n      # is recommended to keep the TCP connection opened with a remote device\r\n      # and not to open and close it for each MODBUS/TCP transaction. In that\r\n      # case, it is important to set the depth of the stream reassembling as\r\n      # unlimited (stream.reassembly.depth: 0)\r\n\r\n      # Stream reassembly size for modbus. By default track it completely.\r\n      stream-depth: 0\r\n\r\n    # DNP3\r\n    dnp3:\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 20000\r\n\r\n    # SCADA EtherNet/IP and CIP protocol support\r\n    enip:\r\n      enabled: no\r\n      detection-ports:\r\n        dp: 44818\r\n        sp: 44818\r\n\r\n# Limit for the maximum number of asn1 frames to decode (default 256)\r\nasn1-max-frames: 256\r\n\r\n\r\n##############################################################################\r\n##\r\n## Advanced settings below\r\n##\r\n##############################################################################\r\n\r\n##\r\n## Run Options\r\n##\r\n\r\n# Run suricata as user and group.\r\n#run-as:\r\n#  user: suri\r\n#  group: suri\r\n\r\n# Some logging module will use that name in event as identifier. The default\r\n# value is the hostname\r\n#sensor-name: suricata\r\n\r\n# Default pid file.\r\n# Will use this file if no --pidfile in command options.\r\n#pid-file: /var/run/suricata.pid\r\n\r\n# Daemon working directory\r\n# Suricata will change directory to this one if provided\r\n# Default: \"/\"\r\n#daemon-directory: \"/\"\r\n\r\n# Suricata core dump configuration. Limits the size of the core dump file to\r\n# approximately max-dump. The actual core dump size will be a multiple of the\r\n# page size. Core dumps that would be larger than max-dump are truncated. On\r\n# Linux, the actual core dump size may be a few pages larger than max-dump.\r\n# Setting max-dump to 0 disables core dumping.\r\n# Setting max-dump to 'unlimited' will give the full core dump file.\r\n# On 32-bit Linux, a max-dump value >= ULONG_MAX may cause the core dump size\r\n# to be 'unlimited'.\r\n\r\ncoredump:\r\n  max-dump: unlimited\r\n\r\n# If suricata box is a router for the sniffed networks, set it to 'router'. If\r\n# it is a pure sniffing setup, set it to 'sniffer-only'.\r\n# If set to auto, the variable is internally switch to 'router' in IPS mode\r\n# and 'sniffer-only' in IDS mode.\r\n# This feature is currently only used by the reject* keywords.\r\nhost-mode: auto\r\n\r\n# Number of packets preallocated per thread. The default is 1024. A higher number\r\n# will make sure each CPU will be more easily kept busy, but may negatively\r\n# impact caching.\r\n#\r\n# If you are using the CUDA pattern matcher (mpm-algo: ac-cuda), different rules\r\n# apply. In that case try something like 60000 or more. This is because the CUDA\r\n# pattern matcher buffers and scans as many packets as possible in parallel.\r\n#max-pending-packets: 1024\r\n\r\n# Runmode the engine should use. Please check --list-runmodes to get the available\r\n# runmodes for each packet acquisition method. Defaults to \"autofp\" (auto flow pinned\r\n# load balancing).\r\n#runmode: autofp\r\n\r\n# Specifies the kind of flow load balancer used by the flow pinned autofp mode.\r\n#\r\n# Supported schedulers are:\r\n#\r\n# round-robin       - Flows assigned to threads in a round robin fashion.\r\n# active-packets    - Flows assigned to threads that have the lowest number of\r\n#                     unprocessed packets (default).\r\n# hash              - Flow alloted usihng the address hash. More of a random\r\n#                     technique. Was the default in Suricata 1.2.1 and older.\r\n#\r\n#autofp-scheduler: active-packets\r\n\r\n# Preallocated size for packet. Default is 1514 which is the classical\r\n# size for pcap on ethernet. You should adjust this value to the highest\r\n# packet size (MTU + hardware header) on your system.\r\n#default-packet-size: 1514\r\n\r\n# Unix command socket can be used to pass commands to suricata.\r\n# An external tool can then connect to get information from suricata\r\n# or trigger some modifications of the engine. Set enabled to yes\r\n# to activate the feature. In auto mode, the feature will only be\r\n# activated in live capture mode. You can use the filename variable to set\r\n# the file name of the socket.\r\nunix-command:\r\n  enabled: yes\r\n  filename: /var/run/suricata-command.socket\r\n\r\n# Magic file. The extension .mgc is added to the value here.\r\n#magic-file: /usr/share/file/magic\r\n#magic-file:\r\n\r\nlegacy:\r\n  uricontent: enabled\r\n\r\n##\r\n## Detection settings\r\n##\r\n\r\n# Set the order of alerts bassed on actions\r\n# The default order is pass, drop, reject, alert\r\n# action-order:\r\n#   - pass\r\n#   - drop\r\n#   - reject\r\n#   - alert\r\n\r\n# IP Reputation\r\n#reputation-categories-file: /etc/suricata/iprep/categories.txt\r\n#default-reputation-path: /etc/suricata/iprep\r\n#reputation-files:\r\n# - reputation.list\r\n\r\n# When run with the option --engine-analysis, the engine will read each of\r\n# the parameters below, and print reports for each of the enabled sections\r\n# and exit.  The reports are printed to a file in the default log dir\r\n# given by the parameter \"default-log-dir\", with engine reporting\r\n# subsection below printing reports in its own report file.\r\nengine-analysis:\r\n  # enables printing reports for fast-pattern for every rule.\r\n  rules-fast-pattern: yes\r\n  # enables printing reports for each rule\r\n  rules: yes\r\n\r\n#recursion and match limits for PCRE where supported\r\npcre:\r\n  match-limit: 3500\r\n  match-limit-recursion: 1500\r\n\r\n##\r\n## Advanced Traffic Tracking and Reconstruction Settings\r\n##\r\n\r\n# Host specific policies for defragmentation and TCP stream\r\n# reassembly. The host OS lookup is done using a radix tree, just\r\n# like a routing table so the most specific entry matches.\r\nhost-os-policy:\r\n  # Make the default policy windows.\r\n  windows: [0.0.0.0/0]\r\n  bsd: []\r\n  bsd-right: []\r\n  old-linux: []\r\n  linux: []\r\n  old-solaris: []\r\n  solaris: []\r\n  hpux10: []\r\n  hpux11: []\r\n  irix: []\r\n  macos: []\r\n  vista: []\r\n  windows2k3: []\r\n\r\n# Defrag settings:\r\n\r\ndefrag:\r\n  memcap: 32mb\r\n  hash-size: 65536\r\n  trackers: 65535 # number of defragmented flows to follow\r\n  max-frags: 65535 # number of fragments to keep (higher than trackers)\r\n  prealloc: yes\r\n  timeout: 60\r\n\r\n# Enable defrag per host settings\r\n#  host-config:\r\n#\r\n#    - dmz:\r\n#        timeout: 30\r\n#        address: [192.168.1.0/24, 127.0.0.0/8, 1.1.1.0/24, 2.2.2.0/24, \"1.1.1.1\", \"2.2.2.2\", \"::1\"]\r\n#\r\n#    - lan:\r\n#        timeout: 45\r\n#        address:\r\n#          - 192.168.0.0/24\r\n#          - 192.168.10.0/24\r\n#          - 172.16.14.0/24\r\n\r\n# Flow settings:\r\n# By default, the reserved memory (memcap) for flows is 32MB. This is the limit\r\n# for flow allocation inside the engine. You can change this value to allow\r\n# more memory usage for flows.\r\n# The hash-size determine the size of the hash used to identify flows inside\r\n# the engine, and by default the value is 65536.\r\n# At the startup, the engine can preallocate a number of flows, to get a better\r\n# performance. The number of flows preallocated is 10000 by default.\r\n# emergency-recovery is the percentage of flows that the engine need to\r\n# prune before unsetting the emergency state. The emergency state is activated\r\n# when the memcap limit is reached, allowing to create new flows, but\r\n# prunning them with the emergency timeouts (they are defined below).\r\n# If the memcap is reached, the engine will try to prune flows\r\n# with the default timeouts. If it doens't find a flow to prune, it will set\r\n# the emergency bit and it will try again with more agressive timeouts.\r\n# If that doesn't work, then it will try to kill the last time seen flows\r\n# not in use.\r\n# The memcap can be specified in kb, mb, gb.  Just a number indicates it's\r\n# in bytes.\r\n\r\nflow:\r\n  memcap: 128mb\r\n  hash-size: 65536\r\n  prealloc: 10000\r\n  emergency-recovery: 30\r\n  #managers: 1 # default to one flow manager\r\n  #recyclers: 1 # default to one flow recycler thread\r\n\r\n# This option controls the use of vlan ids in the flow (and defrag)\r\n# hashing. Normally this should be enabled, but in some (broken)\r\n# setups where both sides of a flow are not tagged with the same vlan\r\n# tag, we can ignore the vlan id's in the flow hashing.\r\nvlan:\r\n  use-for-tracking: true\r\n\r\n# Specific timeouts for flows. Here you can specify the timeouts that the\r\n# active flows will wait to transit from the current state to another, on each\r\n# protocol. The value of \"new\" determine the seconds to wait after a hanshake or\r\n# stream startup before the engine free the data of that flow it doesn't\r\n# change the state to established (usually if we don't receive more packets\r\n# of that flow). The value of \"established\" is the amount of\r\n# seconds that the engine will wait to free the flow if it spend that amount\r\n# without receiving new packets or closing the connection. \"closed\" is the\r\n# amount of time to wait after a flow is closed (usually zero). \"bypassed\"\r\n# timeout controls locally bypassed flows. For these flows we don't do any other\r\n# tracking. If no packets have been seen after this timeout, the flow is discarded.\r\n#\r\n# There's an emergency mode that will become active under attack circumstances,\r\n# making the engine to check flow status faster. This configuration variables\r\n# use the prefix \"emergency-\" and work similar as the normal ones.\r\n# Some timeouts doesn't apply to all the protocols, like \"closed\", for udp and\r\n# icmp.\r\n\r\nflow-timeouts:\r\n\r\n  default:\r\n    new: 30\r\n    established: 300\r\n    closed: 0\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-closed: 0\r\n    emergency-bypassed: 50\r\n  tcp:\r\n    new: 60\r\n    established: 600\r\n    closed: 60\r\n    bypassed: 100\r\n    emergency-new: 5\r\n    emergency-established: 100\r\n    emergency-closed: 10\r\n    emergency-bypassed: 50\r\n  udp:\r\n    new: 30\r\n    established: 300\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-bypassed: 50\r\n  icmp:\r\n    new: 30\r\n    established: 300\r\n    bypassed: 100\r\n    emergency-new: 10\r\n    emergency-established: 100\r\n    emergency-bypassed: 50\r\n\r\n# Stream engine settings. Here the TCP stream tracking and reassembly\r\n# engine is configured.\r\n#\r\n# stream:\r\n#   memcap: 32mb                # Can be specified in kb, mb, gb.  Just a\r\n#                               # number indicates it's in bytes.\r\n#   checksum-validation: yes    # To validate the checksum of received\r\n#                               # packet. If csum validation is specified as\r\n#                               # \"yes\", then packet with invalid csum will not\r\n#                               # be processed by the engine stream/app layer.\r\n#                               # Warning: locally generated trafic can be\r\n#                               # generated without checksum due to hardware offload\r\n#                               # of checksum. You can control the handling of checksum\r\n#                               # on a per-interface basis via the 'checksum-checks'\r\n#                               # option\r\n#   prealloc-sessions: 2k       # 2k sessions prealloc'd per stream thread\r\n#   midstream: false            # don't allow midstream session pickups\r\n#   async-oneside: false        # don't enable async stream handling\r\n#   inline: no                  # stream inline mode\r\n#   max-synack-queued: 5        # Max different SYN/ACKs to queue\r\n#   bypass: no                  # Bypass packets when stream.depth is reached\r\n#\r\n#   reassembly:\r\n#     memcap: 64mb              # Can be specified in kb, mb, gb.  Just a number\r\n#                               # indicates it's in bytes.\r\n#     depth: 1mb                # Can be specified in kb, mb, gb.  Just a number\r\n#                               # indicates it's in bytes.\r\n#     toserver-chunk-size: 2560 # inspect raw stream in chunks of at least\r\n#                               # this size.  Can be specified in kb, mb,\r\n#                               # gb.  Just a number indicates it's in bytes.\r\n#                               # The max acceptable size is 4024 bytes.\r\n#     toclient-chunk-size: 2560 # inspect raw stream in chunks of at least\r\n#                               # this size.  Can be specified in kb, mb,\r\n#                               # gb.  Just a number indicates it's in bytes.\r\n#                               # The max acceptable size is 4024 bytes.\r\n#     randomize-chunk-size: yes # Take a random value for chunk size around the specified value.\r\n#                               # This lower the risk of some evasion technics but could lead\r\n#                               # detection change between runs. It is set to 'yes' by default.\r\n#     randomize-chunk-range: 10 # If randomize-chunk-size is active, the value of chunk-size is\r\n#                               # a random value between (1 - randomize-chunk-range/100)*toserver-chunk-size\r\n#                               # and (1 + randomize-chunk-range/100)*toserver-chunk-size and the same\r\n#                               # calculation for toclient-chunk-size.\r\n#                               # Default value of randomize-chunk-range is 10.\r\n#\r\n#     raw: yes                  # 'Raw' reassembly enabled or disabled.\r\n#                               # raw is for content inspection by detection\r\n#                               # engine.\r\n#\r\n#     chunk-prealloc: 250       # Number of preallocated stream chunks. These\r\n#                               # are used during stream inspection (raw).\r\n#     segments:                 # Settings for reassembly segment pool.\r\n#       - size: 4               # Size of the (data)segment for a pool\r\n#         prealloc: 256         # Number of segments to prealloc and keep\r\n#                               # in the pool.\r\n#     zero-copy-size: 128       # This option sets in bytes the value at\r\n#                               # which segment data is passed to the app\r\n#                               # layer API directly. Data sizes equal to\r\n#                               # and higher than the value set are passed\r\n#                               # on directly.\r\n#\r\nstream:\r\n  memcap: 64mb\r\n  checksum-validation: yes      # reject wrong csums\r\n  inline: auto                  # auto will use inline mode in IPS mode, yes or no set it statically\r\n  reassembly:\r\n    memcap: 256mb\r\n    depth: 1mb                  # reassemble 1mb into a stream\r\n    toserver-chunk-size: 2560\r\n    toclient-chunk-size: 2560\r\n    randomize-chunk-size: yes\r\n    #randomize-chunk-range: 10\r\n    #raw: yes\r\n    #chunk-prealloc: 250\r\n    #segments:\r\n    #  - size: 4\r\n    #    prealloc: 256\r\n    #  - size: 16\r\n    #    prealloc: 512\r\n    #  - size: 112\r\n    #    prealloc: 512\r\n    #  - size: 248\r\n    #    prealloc: 512\r\n    #  - size: 512\r\n    #    prealloc: 512\r\n    #  - size: 768\r\n    #    prealloc: 1024\r\n    # 'from_mtu' means that the size is mtu - 40,\r\n    # or 1460 if mtu couldn't be determined.\r\n    #  - size: from_mtu\r\n    #    prealloc: 1024\r\n    #  - size: 65535\r\n    #    prealloc: 128\r\n    #zero-copy-size: 128\r\n\r\n# Host table:\r\n#\r\n# Host table is used by tagging and per host thresholding subsystems.\r\n#\r\nhost:\r\n  hash-size: 4096\r\n  prealloc: 1000\r\n  memcap: 32mb\r\n\r\n# IP Pair table:\r\n#\r\n# Used by xbits 'ippair' tracking.\r\n#\r\n#ippair:\r\n#  hash-size: 4096\r\n#  prealloc: 1000\r\n#  memcap: 32mb\r\n\r\n\r\n##\r\n## Performance tuning and profiling\r\n##\r\n\r\n# The detection engine builds internal groups of signatures. The engine\r\n# allow us to specify the profile to use for them, to manage memory on an\r\n# efficient way keeping a good performance. For the profile keyword you\r\n# can use the words \"low\", \"medium\", \"high\" or \"custom\". If you use custom\r\n# make sure to define the values at \"- custom-values\" as your convenience.\r\n# Usually you would prefer medium/high/low.\r\n#\r\n# \"sgh mpm-context\", indicates how the staging should allot mpm contexts for\r\n# the signature groups.  \"single\" indicates the use of a single context for\r\n# all the signature group heads.  \"full\" indicates a mpm-context for each\r\n# group head.  \"auto\" lets the engine decide the distribution of contexts\r\n# based on the information the engine gathers on the patterns from each\r\n# group head.\r\n#\r\n# The option inspection-recursion-limit is used to limit the recursive calls\r\n# in the content inspection code.  For certain payload-sig combinations, we\r\n# might end up taking too much time in the content inspection code.\r\n# If the argument specified is 0, the engine uses an internally defined\r\n# default limit.  On not specifying a value, we use no limits on the recursion.\r\ndetect:\r\n  profile: medium\r\n  custom-values:\r\n    toclient-groups: 3\r\n    toserver-groups: 25\r\n  sgh-mpm-context: auto\r\n  inspection-recursion-limit: 3000\r\n  # If set to yes, the loading of signatures will be made after the capture\r\n  # is started. This will limit the downtime in IPS mode.\r\n  #delayed-detect: yes\r\n\r\n  prefilter:\r\n    # default prefiltering setting. \"mpm\" only creates MPM/fast_pattern\r\n    # engines. \"auto\" also sets up prefilter engines for other keywords.\r\n    # Use --list-keywords=all to see which keywords support prefiltering.\r\n    default: mpm\r\n\r\n  # the grouping values above control how many groups are created per\r\n  # direction. Port whitelisting forces that port to get it's own group.\r\n  # Very common ports will benefit, as well as ports with many expensive\r\n  # rules.\r\n  grouping:\r\n    #tcp-whitelist: 53, 80, 139, 443, 445, 1433, 3306, 3389, 6666, 6667, 8080\r\n    #udp-whitelist: 53, 135, 5060\r\n\r\n  profiling:\r\n    # Log the rules that made it past the prefilter stage, per packet\r\n    # default is off. The threshold setting determines how many rules\r\n    # must have made it past pre-filter for that rule to trigger the\r\n    # logging.\r\n    #inspect-logging-threshold: 200\r\n    grouping:\r\n      dump-to-disk: false\r\n      include-rules: false      # very verbose\r\n      include-mpm-stats: false\r\n\r\n# Select the multi pattern algorithm you want to run for scan/search the\r\n# in the engine.\r\n#\r\n# The supported algorithms are:\r\n# \"ac\"      - Aho-Corasick, default implementation\r\n# \"ac-bs\"   - Aho-Corasick, reduced memory implementation\r\n# \"ac-cuda\" - Aho-Corasick, CUDA implementation\r\n# \"ac-ks\"   - Aho-Corasick, \"Ken Steele\" variant\r\n# \"hs\"      - Hyperscan, available when built with Hyperscan support\r\n#\r\n# The default mpm-algo value of \"auto\" will use \"hs\" if Hyperscan is\r\n# available, \"ac\" otherwise.\r\n#\r\n# The mpm you choose also decides the distribution of mpm contexts for\r\n# signature groups, specified by the conf - \"detect.sgh-mpm-context\".\r\n# Selecting \"ac\" as the mpm would require \"detect.sgh-mpm-context\"\r\n# to be set to \"single\", because of ac's memory requirements, unless the\r\n# ruleset is small enough to fit in one's memory, in which case one can\r\n# use \"full\" with \"ac\".  Rest of the mpms can be run in \"full\" mode.\r\n#\r\n# There is also a CUDA pattern matcher (only available if Suricata was\r\n# compiled with --enable-cuda: b2g_cuda. Make sure to update your\r\n# max-pending-packets setting above as well if you use b2g_cuda.\r\n\r\nmpm-algo: auto\r\n\r\n# Select the matching algorithm you want to use for single-pattern searches.\r\n#\r\n# Supported algorithms are \"bm\" (Boyer-Moore) and \"hs\" (Hyperscan, only\r\n# available if Suricata has been built with Hyperscan support).\r\n#\r\n# The default of \"auto\" will use \"hs\" if available, otherwise \"bm\".\r\n\r\nspm-algo: auto\r\n\r\n# Suricata is multi-threaded. Here the threading can be influenced.\r\nthreading:\r\n  set-cpu-affinity: no\r\n  # Tune cpu affinity of threads. Each family of threads can be bound\r\n  # on specific CPUs.\r\n  #\r\n  # These 2 apply to the all runmodes:\r\n  # management-cpu-set is used for flow timeout handling, counters\r\n  # worker-cpu-set is used for 'worker' threads\r\n  #\r\n  # Additionally, for autofp these apply:\r\n  # receive-cpu-set is used for capture threads\r\n  # verdict-cpu-set is used for IPS verdict threads\r\n  #\r\n  cpu-affinity:\r\n    - management-cpu-set:\r\n        cpu: [ 0 ]  # include only these cpus in affinity settings\r\n    - receive-cpu-set:\r\n        cpu: [ 0 ]  # include only these cpus in affinity settings\r\n    - worker-cpu-set:\r\n        cpu: [ \"all\" ]\r\n        mode: \"exclusive\"\r\n        # Use explicitely 3 threads and don't compute number by using\r\n        # detect-thread-ratio variable:\r\n        # threads: 3\r\n        prio:\r\n          low: [ 0 ]\r\n          medium: [ \"1-2\" ]\r\n          high: [ 3 ]\r\n          default: \"medium\"\r\n    #- verdict-cpu-set:\r\n    #    cpu: [ 0 ]\r\n    #    prio:\r\n    #      default: \"high\"\r\n  #\r\n  # By default Suricata creates one \"detect\" thread per available CPU/CPU core.\r\n  # This setting allows controlling this behaviour. A ratio setting of 2 will\r\n  # create 2 detect threads for each CPU/CPU core. So for a dual core CPU this\r\n  # will result in 4 detect threads. If values below 1 are used, less threads\r\n  # are created. So on a dual core CPU a setting of 0.5 results in 1 detect\r\n  # thread being created. Regardless of the setting at a minimum 1 detect\r\n  # thread will always be created.\r\n  #\r\n  detect-thread-ratio: 1.0\r\n\r\n# Luajit has a strange memory requirement, it's 'states' need to be in the\r\n# first 2G of the process' memory.\r\n#\r\n# 'luajit.states' is used to control how many states are preallocated.\r\n# State use: per detect script: 1 per detect thread. Per output script: 1 per\r\n# script.\r\nluajit:\r\n  states: 128\r\n\r\n# Profiling settings. Only effective if Suricata has been built with the\r\n# the --enable-profiling configure flag.\r\n#\r\nprofiling:\r\n  # Run profiling for every xth packet. The default is 1, which means we\r\n  # profile every packet. If set to 1000, one packet is profiled for every\r\n  # 1000 received.\r\n  #sample-rate: 1000\r\n\r\n  # rule profiling\r\n  rules:\r\n\r\n    # Profiling can be disabled here, but it will still have a\r\n    # performance impact if compiled in.\r\n    enabled: yes\r\n    filename: rule_perf.log\r\n    append: yes\r\n\r\n    # Sort options: ticks, avgticks, checks, matches, maxticks\r\n    sort: avgticks\r\n\r\n    # Limit the number of items printed at exit (ignored for json).\r\n    limit: 100\r\n\r\n    # output to json\r\n    json: yes\r\n\r\n  # per keyword profiling\r\n  keywords:\r\n    enabled: yes\r\n    filename: keyword_perf.log\r\n    append: yes\r\n\r\n  # per rulegroup profiling\r\n  rulegroups:\r\n    enabled: yes\r\n    filename: rule_group_perf.log\r\n    append: yes\r\n\r\n  # packet profiling\r\n  packets:\r\n\r\n    # Profiling can be disabled here, but it will still have a\r\n    # performance impact if compiled in.\r\n    enabled: yes\r\n    filename: packet_stats.log\r\n    append: yes\r\n\r\n    # per packet csv output\r\n    csv:\r\n\r\n      # Output can be disabled here, but it will still have a\r\n      # performance impact if compiled in.\r\n      enabled: no\r\n      filename: packet_stats.csv\r\n\r\n  # profiling of locking. Only available when Suricata was built with\r\n  # --enable-profiling-locks.\r\n  locks:\r\n    enabled: no\r\n    filename: lock_stats.log\r\n    append: yes\r\n\r\n  pcap-log:\r\n    enabled: no\r\n    filename: pcaplog_stats.log\r\n    append: yes\r\n\r\n##\r\n## Netfilter integration\r\n##\r\n\r\n# When running in NFQ inline mode, it is possible to use a simulated\r\n# non-terminal NFQUEUE verdict.\r\n# This permit to do send all needed packet to suricata via this a rule:\r\n#        iptables -I FORWARD -m mark ! --mark $MARK/$MASK -j NFQUEUE\r\n# And below, you can have your standard filtering ruleset. To activate\r\n# this mode, you need to set mode to 'repeat'\r\n# If you want packet to be sent to another queue after an ACCEPT decision\r\n# set mode to 'route' and set next-queue value.\r\n# On linux >= 3.1, you can set batchcount to a value > 1 to improve performance\r\n# by processing several packets before sending a verdict (worker runmode only).\r\n# On linux >= 3.6, you can set the fail-open option to yes to have the kernel\r\n# accept the packet if suricata is not able to keep pace.\r\n# bypass mark and mask can be used to implement NFQ bypass. If bypass mark is\r\n# set then the NFQ bypass is activated. Suricata will set the bypass mark/mask\r\n# on packet of a flow that need to be bypassed. The Nefilter ruleset has to\r\n# directly accept all packets of a flow once a packet has been marked.\r\nnfq:\r\n#  mode: accept\r\n#  repeat-mark: 1\r\n#  repeat-mask: 1\r\n#  bypass-mark: 1\r\n#  bypass-mask: 1\r\n#  route-queue: 2\r\n#  batchcount: 20\r\n#  fail-open: yes\r\n\r\n#nflog support\r\nnflog:\r\n    # netlink multicast group\r\n    # (the same as the iptables --nflog-group param)\r\n    # Group 0 is used by the kernel, so you can't use it\r\n  - group: 2\r\n    # netlink buffer size\r\n    buffer-size: 18432\r\n    # put default value here\r\n  - group: default\r\n    # set number of packet to queue inside kernel\r\n    qthreshold: 1\r\n    # set the delay before flushing packet in the queue inside kernel\r\n    qtimeout: 100\r\n    # netlink max buffer size\r\n    max-size: 20000\r\n\r\n##\r\n## Advanced Capture Options\r\n##\r\n\r\n# general settings affecting packet capture\r\ncapture:\r\n  # disable NIC offloading. It's restored when Suricata exists.\r\n  # Enabled by default\r\n  #disable-offloading: false\r\n  #\r\n  # disable checksum validation. Same as setting '-k none' on the\r\n  # commandline\r\n  #checksum-validation: none\r\n\r\n# Netmap support\r\n#\r\n# Netmap operates with NIC directly in driver, so you need FreeBSD wich have\r\n# built-in netmap support or compile and install netmap module and appropriate\r\n# NIC driver on your Linux system.\r\n# To reach maximum throughput disable all receive-, segmentation-,\r\n# checksum- offloadings on NIC.\r\n# Disabling Tx checksum offloading is *required* for connecting OS endpoint\r\n# with NIC endpoint.\r\n# You can find more information at https://github.com/luigirizzo/netmap\r\n#\r\nnetmap:\r\n   # To specify OS endpoint add plus sign at the end (e.g. \"eth0+\")\r\n - interface: eth2\r\n   # Number of receive threads. \"auto\" uses number of RSS queues on interface.\r\n   #threads: auto\r\n   # You can use the following variables to activate netmap tap or IPS mode.\r\n   # If copy-mode is set to ips or tap, the traffic coming to the current\r\n   # interface will be copied to the copy-iface interface. If 'tap' is set, the\r\n   # copy is complete. If 'ips' is set, the packet matching a 'drop' action\r\n   # will not be copied.\r\n   # To specify the OS as the copy-iface (so the OS can route packets, or forward\r\n   # to a service running on the same machine) add a plus sign at the end\r\n   # (e.g. \"copy-iface: eth0+\"). Don't forget to set up a symmetrical eth0+ -> eth0\r\n   # for return packets. Hardware checksumming must be *off* on the interface if\r\n   # using an OS endpoint (e.g. 'ifconfig eth0 -rxcsum -txcsum -rxcsum6 -txcsum6' for FreeBSD\r\n   # or 'ethtool -K eth0 tx off rx off' for Linux).\r\n   #copy-mode: tap\r\n   #copy-iface: eth3\r\n   # Set to yes to disable promiscuous mode\r\n   # disable-promisc: no\r\n   # Choose checksum verification mode for the interface. At the moment\r\n   # of the capture, some packets may be with an invalid checksum due to\r\n   # offloading to the network card of the checksum computation.\r\n   # Possible values are:\r\n   #  - yes: checksum validation is forced\r\n   #  - no: checksum validation is disabled\r\n   #  - auto: suricata uses a statistical approach to detect when\r\n   #  checksum off-loading is used.\r\n   # Warning: 'checksum-validation' must be set to yes to have any validation\r\n   #checksum-checks: auto\r\n   # BPF filter to apply to this interface. The pcap filter syntax apply here.\r\n   #bpf-filter: port 80 or udp\r\n #- interface: eth3\r\n   #threads: auto\r\n   #copy-mode: tap\r\n   #copy-iface: eth2\r\n   # Put default values here\r\n - interface: default\r\n\r\n# PF_RING configuration. for use with native PF_RING support\r\n# for more info see http://www.ntop.org/products/pf_ring/\r\npfring:\r\n  - interface: eth0\r\n    # Number of receive threads (>1 will enable experimental flow pinned\r\n    # runmode)\r\n    threads: 1\r\n\r\n    # Default clusterid.  PF_RING will load balance packets based on flow.\r\n    # All threads/processes that will participate need to have the same\r\n    # clusterid.\r\n    cluster-id: 99\r\n\r\n    # Default PF_RING cluster type. PF_RING can load balance per flow.\r\n    # Possible values are cluster_flow or cluster_round_robin.\r\n    cluster-type: cluster_flow\r\n    # bpf filter for this interface\r\n    #bpf-filter: tcp\r\n    # Choose checksum verification mode for the interface. At the moment\r\n    # of the capture, some packets may be with an invalid checksum due to\r\n    # offloading to the network card of the checksum computation.\r\n    # Possible values are:\r\n    #  - rxonly: only compute checksum for packets received by network card.\r\n    #  - yes: checksum validation is forced\r\n    #  - no: checksum validation is disabled\r\n    #  - auto: suricata uses a statistical approach to detect when\r\n    #  checksum off-loading is used. (default)\r\n    # Warning: 'checksum-validation' must be set to yes to have any validation\r\n    #checksum-checks: auto\r\n  # Second interface\r\n  #- interface: eth1\r\n  #  threads: 3\r\n  #  cluster-id: 93\r\n  #  cluster-type: cluster_flow\r\n  # Put default values here\r\n  - interface: default\r\n    #threads: 2\r\n\r\n# For FreeBSD ipfw(8) divert(4) support.\r\n# Please make sure you have ipfw_load=\"YES\" and ipdivert_load=\"YES\"\r\n# in /etc/loader.conf or kldload'ing the appropriate kernel modules.\r\n# Additionally, you need to have an ipfw rule for the engine to see\r\n# the packets from ipfw.  For Example:\r\n#\r\n#   ipfw add 100 divert 8000 ip from any to any\r\n#\r\n# The 8000 above should be the same number you passed on the command\r\n# line, i.e. -d 8000\r\n#\r\nipfw:\r\n\r\n  # Reinject packets at the specified ipfw rule number.  This config\r\n  # option is the ipfw rule number AT WHICH rule processing continues\r\n  # in the ipfw processing system after the engine has finished\r\n  # inspecting the packet for acceptance.  If no rule number is specified,\r\n  # accepted packets are reinjected at the divert rule which they entered\r\n  # and IPFW rule processing continues.  No check is done to verify\r\n  # this will rule makes sense so care must be taken to avoid loops in ipfw.\r\n  #\r\n  ## The following example tells the engine to reinject packets\r\n  # back into the ipfw firewall AT rule number 5500:\r\n  #\r\n  # ipfw-reinjection-rule-number: 5500\r\n\r\n\r\nnapatech:\r\n    # The Host Buffer Allowance for all streams\r\n    # (-1 = OFF, 1 - 100 = percentage of the host buffer that can be held back)\r\n    hba: -1\r\n\r\n    # use_all_streams set to \"yes\" will query the Napatech service for all configured\r\n    # streams and listen on all of them. When set to \"no\" the streams config array\r\n    # will be used.\r\n    use-all-streams: yes\r\n\r\n    # The streams to listen on\r\n    streams: [1, 2, 3]\r\n\r\n# Tilera mpipe configuration. for use on Tilera TILE-Gx.\r\nmpipe:\r\n\r\n  # Load balancing modes: \"static\", \"dynamic\", \"sticky\", or \"round-robin\".\r\n  load-balance: dynamic\r\n\r\n  # Number of Packets in each ingress packet queue. Must be 128, 512, 2028 or 65536\r\n  iqueue-packets: 2048\r\n\r\n  # List of interfaces we will listen on.\r\n  inputs:\r\n  - interface: xgbe2\r\n  - interface: xgbe3\r\n  - interface: xgbe4\r\n\r\n\r\n  # Relative weight of memory for packets of each mPipe buffer size.\r\n  stack:\r\n    size128: 0\r\n    size256: 9\r\n    size512: 0\r\n    size1024: 0\r\n    size1664: 7\r\n    size4096: 0\r\n    size10386: 0\r\n    size16384: 0\r\n\r\n##\r\n## Hardware accelaration\r\n##\r\n\r\n# Cuda configuration.\r\ncuda:\r\n  # The \"mpm\" profile.  On not specifying any of these parameters, the engine's\r\n  # internal default values are used, which are same as the ones specified in\r\n  # in the default conf file.\r\n  mpm:\r\n    # The minimum length required to buffer data to the gpu.\r\n    # Anything below this is MPM'ed on the CPU.\r\n    # Can be specified in kb, mb, gb.  Just a number indicates it's in bytes.\r\n    # A value of 0 indicates there's no limit.\r\n    data-buffer-size-min-limit: 0\r\n    # The maximum length for data that we would buffer to the gpu.\r\n    # Anything over this is MPM'ed on the CPU.\r\n    # Can be specified in kb, mb, gb.  Just a number indicates it's in bytes.\r\n    data-buffer-size-max-limit: 1500\r\n    # The ring buffer size used by the CudaBuffer API to buffer data.\r\n    cudabuffer-buffer-size: 500mb\r\n    # The max chunk size that can be sent to the gpu in a single go.\r\n    gpu-transfer-size: 50mb\r\n    # The timeout limit for batching of packets in microseconds.\r\n    batching-timeout: 2000\r\n    # The device to use for the mpm.  Currently we don't support load balancing\r\n    # on multiple gpus.  In case you have multiple devices on your system, you\r\n    # can specify the device to use, using this conf.  By default we hold 0, to\r\n    # specify the first device cuda sees.  To find out device-id associated with\r\n    # the card(s) on the system run \"suricata --list-cuda-cards\".\r\n    device-id: 0\r\n    # No of Cuda streams used for asynchronous processing. All values > 0 are valid.\r\n    # For this option you need a device with Compute Capability > 1.0.\r\n    cuda-streams: 2\r\n\r\n##\r\n## Include other configs\r\n##\r\n\r\n# Includes.  Files included here will be handled as if they were\r\n# inlined in this configuration file.\r\n#include: include1.yaml\r\n#include: include2.yaml",
      "conf_stats": false,
      "conf_afpacket_interface": "eth0",
      "conf_outputs_fast": false,
      "conf_outputs_unified2alert": false,
      "conf_outputs_evelog": true,
      "conf_outputs_evelog_alert_taggedpackets": false,
      "conf_outputs_evelog_alert_http": true,
      "conf_outputs_evelog_alert_tls": true,
      "conf_outputs_evelog_alert_ssh": true,
      "conf_outputs_evelog_alert_dnp3": true,
      "conf_outputs_evelog_xff": false,
      "conf_outputs_evelog_dns_query": true,
      "conf_outputs_evelog_dns_answer": true,
      "conf_outputs_evelog_tls_extended": true,
      "conf_outputs_evelog_files_forcemagic": false,
      "conf_lua": false,
      "conf_applayer_tls": 0,
      "conf_applayer_dcerpc": 0,
      "conf_applayer_ftp": 0,
      "conf_applayer_ssh": 0,
      "conf_applayer_smtp": 0,
      "conf_applayer_imap": 2,
      "conf_applayer_msn": 2,
      "conf_applayer_smb": 0,
      "conf_applayer_dns": 0,
      "conf_HOME_NET": "[192.168.50.0/24]",
      "conf_EXTERNAL_NET": "!$HOME_NET",
      "conf_HTTP_SERVERS": "$HOME_NET",
      "conf_SMTP_SERVERS": "$HOME_NET",
      "conf_SQL_SERVERS": "$HOME_NET",
      "conf_DNS_SERVERS": "$HOME_NET",
      "conf_TELNET_SERVERS": "$HOME_NET",
      "conf_AIM_SERVERS": "$EXTERNAL_NET",
      "conf_DNP3_SERVER": "$HOME_NET",
      "conf_DNP3_CLIENT": "$HOME_NET",
      "conf_MODBUS_CLIENT": "$HOME_NET",
      "conf_MODBUS_SERVER": "$HOME_NET",
      "conf_ENIP_CLIENT": "$HOME_NET",
      "conf_ENIP_SERVER": "$HOME_NET",
      "conf_HTTP_PORTS": "80",
      "conf_SHELLCODE_PORTS": "!80",
      "conf_ORACLE_PORTS": "1521",
      "conf_SSH_PORTS": "22",
      "conf_DNP3_PORTS": "20000",
      "conf_MODBUS_PORTS": "502"
    }
  }
]
